<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GO</title>
    <url>/2021/04/01/go/index/</url>
    <content><![CDATA[<h3 id="关于特性缺失"><a href="#关于特性缺失" class="headerlink" title="关于特性缺失"></a>关于特性缺失</h3><ul>
<li>为了简化设计，不支持函数重载和操作符重载</li>
<li>为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换</li>
<li>Go 语言通过另一种途径实现面向对象设计来放弃类和类型的继承</li>
<li>尽管在接口的使用方面可以实现类似变体类型的功能，但本身不支持变体类型</li>
<li>不支持动态加载代码</li>
<li>不支持动态链接库</li>
<li>不支持泛型</li>
<li>通过 recover 和 panic 来替代异常机制</li>
<li>不支持静态变量</li>
</ul>
<h3 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h3><ul>
<li>声明的变量必须使用 ，否则编译报错 ， 常量则不会</li>
<li>一组申明的常量中，如果某个没用赋值，则默认和上一行一致</li>
<li>名称大写默认导出(public) , 小写本文件使用(private)</li>
<li>简写申明只能在函数内使用</li>
</ul>
<h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span>             <span class="token comment">// 申明类型</span>
<span class="token keyword">fallthrough</span>      <span class="token comment">// 穿透下一个switch</span>
<span class="token keyword">goto</span>             <span class="token comment">// 跳转到制定语句块</span>
<span class="token keyword">go</span>               <span class="token comment">// 开启新的协程</span>
<span class="token boolean">nil</span>              <span class="token comment">// 空值</span>
<span class="token boolean">iota</span>             <span class="token comment">// 编译器自动累加 直到遇到新的 const 申明</span>
<span class="token keyword">defer</span>            <span class="token comment">// 函数返回前执行 栈结构</span>
<span class="token boolean">_</span>                <span class="token comment">// 垃圾桶，舍弃不想要的值</span>
<span class="token keyword">select</span>           <span class="token comment">// 选择通道</span>
<span class="token builtin">make</span>             <span class="token comment">// 创建复杂类型 返回指针,使用.时自动展开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>基本<ul>
<li>string</li>
<li>byte</li>
<li>bool</li>
<li>int</li>
<li>uint</li>
<li>float</li>
<li>complex64</li>
</ul>
</li>
<li>其他<ul>
<li>slice</li>
<li>strut</li>
<li>array</li>
<li>interface{}</li>
<li>chan</li>
<li>map</li>
<li>time.Time</li>
</ul>
</li>
</ul>
<h3 id="资料链接"><a href="#资料链接" class="headerlink" title="资料链接"></a>资料链接</h3><ul>
<li><a href="https://github.com/unknwon/the-way-to-go_ZH_CN">《The Way to Go》中文译本，中文正式名《Go 入门指南》</a></li>
<li><a href="https://github.com/mmcgrana/gobyexample">gobyexample</a></li>
<li><a href="https://github.com/x1unix/go-playground">GO playground</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang">build-web-application-with-golang</a></li>
<li><a href="https://github.com/chai2010/advanced-go-programming-book">Go 语言高级编程</a></li>
</ul>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome-extention</title>
    <url>/2020/04/15/fe/chrome-extention/</url>
    <content><![CDATA[<p>1: 找到本地 chrome 扩展的源码位置</p>
<ul>
<li>  方法一 : 扩展的默认位置 : C:\Users\ {你的用户名} \AppData\Local\Google\Chrome\User Data\Default\Extensions\ {扩展 id}</li>
<li>  方法二 : 使用扩展 Extension Source Locator 直接复制后打开资源管理器，自动导向目标位置</li>
</ul>
<p>2: 下载 <code>chrome.adm</code> 并 <code>win + r</code>运行<code>gpedit.msc</code> 设置 chrome 本地策略组配置扩展白名单 <a href="https://jingyan.baidu.com/article/ce09321b7d581e2bff858f23.html">参考</a><br>3：文件夹内修改扩展代码<br>4：修改该扩展内文件夹 <code>_metaData</code> 为 <code>metaData</code><br>5: 打开文件夹下的 <code>manifest.json</code> 文件,删除 “<code>key</code>“ 和 “<code>update_url</code>“ 两个字段<br>6： <code>chrome://extensions/</code>内选择该目录并打包扩展程序<br>7： 返回扩展源码文件夹上级目录 找到 <code>.crx</code> 的文件拖进页面安装<br>8: 重启浏览器并打开扩展开关 <a href="https://blog.csdn.net/qq_26891045/article/details/51200059">参考</a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 更新</title>
    <url>/2020/04/10/fe/ECMAScript/</url>
    <content><![CDATA[<h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><ul>
<li>新特性<ul>
<li>严格模式”use strict”</li>
<li>String.trim()</li>
<li>Array.isArray()</li>
<li>Array.forEach()</li>
<li>Array.map()</li>
<li>Array.filter()</li>
<li>Array.reduce()</li>
<li>Array.reduceRight()</li>
<li>Array.every()</li>
<li>Array.some()</li>
<li>Array.indexOf()</li>
<li>Array.lastIndexOf()</li>
<li>JSON.parse()</li>
<li>JSON.stringify()</li>
<li>Date.now()</li>
<li>对象属性 Getter 和 Setter</li>
</ul>
</li>
<li>语法更改<ul>
<li>对字符串的属性访问 [ ]</li>
<li>数组和对象字面量中的尾随逗号</li>
<li>多行字符串字面量</li>
<li>作为属性名称的保留字</li>
</ul>
</li>
</ul>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul>
<li>变量的解构赋值</li>
<li>字符串的扩展</li>
<li>字符串的新增方法</li>
<li>正则的扩展</li>
<li>数值的扩展</li>
<li>函数的扩展</li>
<li>数组的扩展</li>
<li>对象的扩展</li>
<li>对象的新增方法</li>
<li>Symbol</li>
<li>Set 和 Map 数据结构</li>
<li>Proxy</li>
<li>Reflect</li>
<li>Promise 对象</li>
<li>Iterator 和 for…of 循环</li>
<li>Generator 函数的语法</li>
<li>Generator 函数的异步应用</li>
<li>async 函数</li>
<li>Class 的基本语法</li>
<li>Class 的继承</li>
<li>Module 的语法</li>
<li>Module 的加载实现</li>
<li>编程风格</li>
<li>读懂规格</li>
<li>异步遍历器</li>
<li>ArrayBuffer</li>
</ul>
<h3 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h3><ul>
<li>指数运算符(幂): **</li>
<li>Array.prototype.includes(value , firstIndex) : 判断数组中是否包含指定 value</li>
</ul>
<h3 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h3><ul>
<li>字符串填充（padStart 和 padEnd）</li>
<li>Object.values // 当把数字当做对象的键的时候，返回的数组以键的值升序排序</li>
<li>Object.entries</li>
<li>Object.getOwnPropertyDescriptors()</li>
<li>函数参数列表和调用中的尾随逗号</li>
<li>Async Functions (异步函数)</li>
<li>共享内存 和 Atomics</li>
</ul>
<h3 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h3><ul>
<li>对象的 Rest(结构)/Spread(扩展)</li>
<li>for await of 异步迭代</li>
<li>Promise.prototype.finally()</li>
<li>正则 (lookahead) 先行断言/(lookbehind) 反向断言</li>
<li>正则表达式 Unicode 转义\p{…}和\P{…}</li>
<li>正则表达式命名捕获组（groups）</li>
<li>正则表达式 dotAll 模式 /s</li>
</ul>
<h3 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h3><ul>
<li>新特性<ul>
<li>Array.prototype.{flat,flatMap}：用来打平数组</li>
<li>Object.fromEntries??Object.entries 的逆运算</li>
<li>String.prototype.{trimStart,trimEnd}：规范化字符串 trim 方法（广泛实现的非规范版本叫 String.prototype.trimLeft/trimRight）</li>
<li>Symbol.prototype.description：返回 Symbol 的描述信息</li>
</ul>
</li>
<li>语法修改<ul>
<li>Optional catch binding：允许省略 try-catch 结构中 catch 块的参数部分</li>
<li>Array.prototype.sort：要求排序算法必须是稳定的（相等元素排序前后顺序不变）</li>
<li>Well-formed JSON.stringify：要求 JSON.stringify 返回格式良好的 UTF-8 字符串</li>
<li>JSON superset：字符串字面量中允许出现 U+2028(LINE SEPARATOR)和 U+2029(PARAGRAPH SEPARATOR)</li>
<li>Function.prototype.toString revision：要求返回 function 源码文本，或标准占位符,注释</li>
</ul>
</li>
</ul>
<h3 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h3><ul>
<li># 私有变量</li>
<li>Promise.allSettled 解决 promiese.all 中一个 reject 的缺陷</li>
<li>?? 空值合并运算符 (解决合法假值 ‘’ , 0 )</li>
<li>?. 可选链运算符</li>
<li>BigInt</li>
<li>dynamic-import 动态引入</li>
<li>globalThis // window || self || global</li>
</ul>
<h3 id="chromeV8"><a href="#chromeV8" class="headerlink" title="chromeV8"></a>chromeV8</h3><ul>
<li><p>垃圾回收</p>
<ul>
<li>短期内存空间<ul>
<li>方法: 新生代/老生代替换</li>
<li>结果 多次存活并交换的对象，存入常用内存空间</li>
</ul>
</li>
<li>常用内存空间<ul>
<li>方法: 分片 + 增量标记清除 毫秒级别</li>
</ul>
</li>
</ul>
</li>
<li><p>工作原理</p>
<ul>
<li>parse 解析器 -&gt; 成 AST 语法树</li>
<li>interpreter 解释 -&gt; 字节码 (可直接执行，出现一次) 执行后清除 AST 内存空间</li>
<li>根据字节码优化 编译成 -&gt; 机器码(可直接执行,出现多次的热点函数，优化并记录。)</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//字节码执行</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 优化记录函数并优化成机器码（速度更快，消耗更少）</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 优化后的机器码执行</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">)</span> <span class="token comment">//  回退 变成字节码执行   体现出TS的优势</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="Important"><a href="#Important" class="headerlink" title="Important"></a>Important</h3><ul>
<li>WeakSet 只能储存对象， WeakMap 键名只能是对象</li>
<li>js 代码预解析，等号右边不解析,对比 import(静态加载)</li>
<li>隐式转换会调用 valueOf 和 toString 方法</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/duyujian706709149/article/details/104014127">2020</a></li>
<li><a href="http://www.ayqy.net/blog/es2019/">ES10(2019)</a></li>
<li><a href="https://www.html.cn/archives/9990">ES9 (2018)</a></li>
<li><a href="https://www.html.cn/archives/9981">ES8 (2017)</a></li>
<li><a href="https://www.jianshu.com/p/df0d1fd010bb">ES7 (2016)</a></li>
<li><a href="https://es6.ruanyifeng.com/#docs/arraybuffer">ES6 (2015)</a></li>
<li><a href="https://www.w3school.com.cn/js/js_es5.asp">ES5 (2014)</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>puppeteer</title>
    <url>/2020/04/01/code/puppeteer/</url>
    <content><![CDATA[<h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><ul>
<li>puppeteer 无头浏览器访问问卷星，模拟用户做页面操作</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> platform <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./data.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> dataArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">checktOs</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//操作系统类型,返回值有'darwin', 'freebsd', 'linux', 'sunos' , 'win32'</span>
    <span class="token keyword">return</span> platform <span class="token operator">===</span> str
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//  发送任务</span>

  <span class="token keyword">await</span> dataArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> now</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> pre
    <span class="token keyword">return</span> <span class="token function">worker</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// for await (let item of dataArr) &#123;</span>
  <span class="token comment">//   await worker(item)</span>
  <span class="token comment">// &#125;</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token parameter">model</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> arg <span class="token operator">=</span> <span class="token function">typeOs</span><span class="token punctuation">(</span><span class="token string">'win32'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">slowMo</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">,</span> <span class="token string">'--disable-setuid-sandbox'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">model</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#q1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> model<span class="token punctuation">.</span>detail
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#q2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> model<span class="token punctuation">.</span>name
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#q3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> model<span class="token punctuation">.</span>num
      model<span class="token punctuation">.</span>ans<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#divquestion</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ul</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span>item <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span>
    <span class="token keyword">const</span> submit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#submit_button'</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断是否 跳转到校验页面</span>
    <span class="token comment">//  ...</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 重试</span>
    <span class="token keyword">await</span> submit<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Node</tag>
        <tag>puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>css3新特性</title>
    <url>/2020/07/18/fe/css3/</url>
    <content><![CDATA[<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul>
<li>  <a href="#animation">aniation</a></li>
<li>  <a href="#transition">transition</a></li>
<li>  <a href="#border">border</a></li>
<li>  <a href="#background">background</a></li>
<li>  <a href="#gradient">gradient</a></li>
<li>  <a href="#wordstyle">wordstyle</a></li>
<li>  <a href="#transform">transform</a></li>
<li>  <a href="#%E9%80%89%E6%8B%A9%E5%99%A8">选择器</a></li>
<li>  flex</li>
<li>  initial 设置该属性为它的默认值。请参阅 initial。</li>
<li>  inherit 从父元素继承该属性。请参阅 inherit。</li>
<li>  多媒体查询@media</li>
</ul>
<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></p>
<ul>
<li><p>  animation-name：为 @keyframes 动画名称。</p>
</li>
<li><p>@Keyframes 规则：使用@keyframes 规则，你可以创建动画。<br>  语法：<code>@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125; &#125;</code></p>
  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> mymove</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token atrule"><span class="token rule">@keyframes</span> mymovetwo</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">to</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>  animation-duration：动画指定需要多少秒或毫秒完成。ex: 1s</p>
</li>
<li><p>animation-timing-function：设置动画将如何完成一个周期。</p>
<ul>
<li>  ease 默认。动画以低速开始，然后加快，在结束前变慢。</li>
<li>  linear 动画从头到尾的速度是相同的。</li>
<li>  ease-in 动画以低速开始。</li>
<li>  ease-out 动画以低速结束。</li>
<li>  ease-in-out 动画以低速开始和结束。</li>
<li>  cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</li>
<li>steps(number_of_steps, direction)<ul>
<li>  number_of_steps ：阶梯数（必须是一个正整数），他将动画的总时长按照阶梯数等距划分</li>
<li>  direction ：可选值为 start 或 end，默认 end，也可以不写；start 表示动画的第一帧会被立即执行,直接从第二帧开始，然后以第一帧结束；end 则表示动画从第一帧开始到正常结束；</li>
</ul>
</li>
</ul>
</li>
<li><p>  animation-delay：设置动画在启动前的延迟间隔，可以是秒或毫秒。</p>
</li>
<li><p>animation-iteration-count：定义动画的播放次数。</p>
<ul>
<li>  n 播放 n 次</li>
<li>  infinite 无限循环</li>
</ul>
</li>
<li><p>animation-direction：指定是否循环交替反向播放动画。</p>
<ul>
<li>  normal 正常播放</li>
<li>  reverse 反向播放</li>
<li>  alternate 动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</li>
<li>  alternate-reverse 动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</li>
<li>  inherit | initial</li>
</ul>
</li>
<li><p>animation-fill-mode：规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。默认情况下，CSS 动画在第一个关键帧播放完之前不会影响元素，在最后一个关键帧完成后停止影响元素。该属性可重写该行为。</p>
<ul>
<li>  none 默认值 动画在动画执行之前和之后不会应用任何样式到目标元素。</li>
<li>  forwards 在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。</li>
<li>  backwards 动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 “normal” 或 “alternate” 时）或 to 关键帧中的值（当 animation-direction 为 “reverse” 或 “alternate-reverse” 时）。</li>
<li>  both 动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。</li>
<li>  inherit | initial</li>
</ul>
</li>
<li><p>animation-play-state：指定动画是否正在运行或已暂停。</p>
<ul>
<li>  running 默认值 运行动画</li>
<li>  paused 暂停动画</li>
</ul>
</li>
</ul>
<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><ul>
<li>  transition-property 规定应用过渡的 CSS 属性的名称。 默认 all</li>
<li>  transition-duration 定义过渡效果花费的时间。默认是 0。</li>
<li>  transition-timing-function 规定过渡效果的时间曲线。默认是 “ease”。</li>
<li>  transition-delay 规定过渡效果何时开始。默认是 0。</li>
</ul>
<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><ul>
<li><p>  border-radius</p>
</li>
<li><p>  box-shadow：向框添加一个或多个阴影。 语法：box-shadow: 水平位移 垂直位移 [模糊半径 阴影尺寸 阴影颜色 inset(内部阴影)];</p>
</li>
<li><p>  box-shadow: 10px 10px 5px #888888;</p>
</li>
<li><p>  border-image：设置边框图像，该属性是一个简写属性，用于设置以下属性：</p>
</li>
<li><p>  border-image-source：边框的图片的路径；</p>
</li>
<li><p>  border-image-slice：图片边框向内偏移；</p>
</li>
<li><p>  border-image-width：图片边框的宽度；</p>
</li>
<li><p>  border-image-outset：边框图像区域超出边框的量；</p>
</li>
<li><p>  border-image-repeat：图像边框是否应平铺(repeate)、铺满(round)或拉伸(stretch)。</p>
</li>
<li><p>  border-image: url(/i/border.png) 30 30 round;</p>
</li>
</ul>
<h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><ul>
<li>  background-size：背景图片的尺寸。</li>
<li>  background-size: 100px 100px; 第一个值设置宽度，第二个值设置高度</li>
<li>  background-size: 50% 50%; 以父元素的百分比来设置背景图像的宽度和高度</li>
<li>  background-size: cover; 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域 -</li>
<li>  background-size: contain; 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应 - 内容区域</li>
<li>  background-origin：规定 background-position 属性相对于什么位置来定位。</li>
<li>  background-origin: padding-box; 背景图像相对于内边距框来定位（默认值）</li>
<li>  background-origin: border-box; 背景图像相对于边框盒来定位</li>
<li>  background-origin: content-box; 背景图像相对于内容框来定位</li>
<li>  background-clip：规定背景的绘制区域。</li>
<li></li>
<li>  background-clip: padding-box; 背景被裁剪到内边距框</li>
<li>  background-clip: border-box; 背景被裁剪到边框盒（默认值）</li>
<li>  background-clip: content-box; 背景被裁剪到内容框</li>
</ul>
<h3 id="gradient"><a href="#gradient" class="headerlink" title="gradient"></a>gradient</h3><ul>
<li><p>linear-gradient()：线性渐变。 语法：background: linear-gradient(方向, start-color, …, last-color);</p>
<ul>
<li>  background: linear-gradient(red, blue); 省略方向默认从上到下</li>
<li>  background: linear-gradient(to right, red , blue); 从左侧开始的线性渐变，从红色开始，转为蓝色</li>
<li>  background: linear-gradient(to bottom right, red , blue); 从左上角到右下角的线性渐变</li>
</ul>
</li>
<li><p>radial-gradient()：径向渐变。 语法：background: radial-gradient(圆的类型 渐变的大小 at 渐变的位置, start-color, …, last-color);</p>
<ul>
<li><p>  background: radial-gradient(red, yellow, green); 椭圆形渐变</p>
</li>
<li><p>  background: radial-gradient(circle, red, yellow, green); 圆形渐变</p>
</li>
<li><p>  background: radial-gradient(red 10%, green 50%, blue 100%); 颜色结点不均匀分布</p>
</li>
<li><p>  background: radial-gradient(at 50% 50%, blue, green, yellow); 圆心在中间</p>
</li>
<li><p>  background: radial-gradient(closest-side at 60% 55%, blue, green, yellow); 圆心在离左侧 60%，离上侧 50%的地方，半径长度为从圆心到离圆心最近的边</p>
</li>
</ul>
</li>
</ul>
<h3 id="wordstyle"><a href="#wordstyle" class="headerlink" title="wordstyle"></a>wordstyle</h3><ul>
<li><p>word-break：定义如何换行。</p>
<ul>
<li>  nomal : 浏览器默认换行规则</li>
<li>  break-all 允许单词内换行</li>
<li>  keep-all 只能半角空格或连字符换</li>
</ul>
</li>
<li><p>word-wrap：允许长的内容可以自动换行。</p>
<ul>
<li>  normal 只允许断点字符</li>
<li>  break-word 长单词或者 url 内部换行</li>
</ul>
</li>
<li><p>text-overflow：指定当文本溢出包含它的元素，应该发生什么。</p>
<ul>
<li>  clip 修建文本</li>
<li>  ellipsis 显示省略号</li>
<li>  string （firefox ） 代替被剪切的文本</li>
</ul>
</li>
<li><p>  text-shadow：文字阴影。 语法：text-shadow: 水平位移 垂直位移 [模糊半径 阴影颜色];</p>
</li>
</ul>
<h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><ul>
<li>  transform：应用于元素的 2D 或 3D 转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。 语法：transform: none|transform-functions;</li>
</ul>
<ul>
<li>  transform-origin：允许您更改转换元素的位置。2D 转换元素可以改变元素的 X 和 Y 轴。 3D 转换元素，还可以更改元素的 Z 轴。语法：transform-origin: x-axis y-axis z-axis;</li>
</ul>
<ul>
<li><p>  transform-origin: 0% 0%; 将元素左上角设为旋转点</p>
</li>
<li><p>  transform-style：指定嵌套元素是怎样在三维空间中呈现。</p>
</li>
<li><p>2D 转换方法</p>
<ul>
<li><p>  rotate(angle)：定义 2D 旋转，在参数中规定角度。</p>
</li>
<li><p>  matrix(a,b,c,d,e,f)：定义 2D 转换，使用六个值的矩阵。transform: matrix(2, 1, 0, 2, 50, 50); 水平放大两倍，水平倾斜，垂直放大两倍，水平向左移动 50%，垂直向下移动 50%</p>
</li>
<li><p>translate ;移动</p>
<ul>
<li><p>  translate(x,y)：指定元素在二维空间中的位移。X 轴方向向右，Y 轴方向向下。</p>
</li>
<li><p>  translateX(n)：指定元素在 X 轴中的位移。</p>
</li>
<li><p>  translateY(n)：指定元素在 Y 轴中的位移。</p>
</li>
</ul>
</li>
<li><p>scale(2); 放大两倍</p>
<ul>
<li><p>  scale(n)：定义 2D 缩放转换。</p>
</li>
<li><p>  scaleX(n)：定义 X 轴方向的缩放转换。</p>
</li>
<li><p>  scaleY(n)：定义 Y 轴方向的缩放转换。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>skew ;倾斜</p>
<ul>
<li>  skew(x-angle,y-angle)：定义沿着 X 和 Y 轴的 2D 倾斜转换。</li>
<li>  skewX(angle)：定义沿着 X 轴的 2D 倾斜转换。</li>
<li>  skewY(angle)：定义沿着 Y 轴的 2D 倾斜转换。</li>
</ul>
</li>
</ul>
</li>
<li><p>3D 转换方法</p>
<ul>
<li>  perspective(n)：为 3D 转换元素定义透视视图。</li>
<li>  translate3d(x,y,z)：指定元素在三维空间中的位移。X 轴方向向右，Y 轴方向向下，Z 轴方向向你。</li>
<li>  translateX(x)：指定元素在 X 轴中的位移。</li>
<li>  translateY(y)：指定元素在 Y 轴中的位移。</li>
<li>  translateZ(z)：指定元素在 Z 轴中的位移。</li>
<li>  scale3d(x,y,z)：定义 3D 缩放转换。</li>
<li>  scaleX(x)：通过设置 X 轴的值来定义缩放转换。</li>
<li>  scaleY(y)：通过设置 Y 轴的值来定义缩放转换。</li>
<li>  scaleZ(z)：通过设置 Z 轴的值来定义缩放转换。</li>
<li>  rotate3d(x,y,z,angle)：定义 3D 旋转。</li>
<li>  rotateX(x)：定义沿着 X 轴的 3D 旋转。</li>
<li>  rotateY(y)：定义沿着 Y 轴的 3D 旋转。</li>
<li>  rotateZ(z)：定义沿着 Z 轴的 3D 旋转。</li>
<li>  matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)：定义 3D 转换，使用 16 个值的 4x4 矩阵。</li>
</ul>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>  p:first-of-type 选择器匹配属于其父元素的特定类型的首个子元素的每个元素。</li>
<li>  p:last-of-type 选器择器匹配属于其父元素的特定类型的最后一个子元素的每个元素。</li>
<li>  p:only-of-type 选择器匹配属于其父元素的特定类型的唯一子元素的每个元素。</li>
<li>  p:only-child 选择器匹配属于其父元素的唯一子元素的每个元素。</li>
<li>  p:nth-child(n) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。 n 可以是数字、关键词或公式。</li>
<li>  :enabled :disabled 表单控件的禁用状态。</li>
<li>  :checked 选择器匹配每个选中的输入元素（仅适用于单选按钮或复选框）。</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>前端遇到的面试题</title>
    <url>/2020/07/08/fe/feQa/</url>
    <content><![CDATA[<h3 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h3><ul>
<li>浏览器兼容处理(跨浏览器)</li>
<li>性能优化</li>
<li>隐式转换规则</li>
</ul>
<h4 id="div-实现富文本相关操作"><a href="#div-实现富文本相关操作" class="headerlink" title="div 实现富文本相关操作"></a>div 实现富文本相关操作</h4><ul>
<li>div 设置 contentEditable = rue</li>
<li>document.execCommand(sCommand[,交互方式, 动态参数])</li>
</ul>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><ul>
<li>父元素<ul>
<li>flex-direction 主轴方向 row | row-reverse | column | column-reverse;</li>
<li>flex-wrap 换行规则 nowrap | wrap | wrap-reverse;</li>
<li>flex-flow flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</li>
<li>justify-content 主轴对齐方式 flex-start | flex-end | center | space-between | space-around;</li>
<li>align-items 交叉轴对齐方式 flex-start | flex-end | center | baseline | stretch;</li>
<li>align-content 多轴线对齐 flex-start | flex-end | center | space-between | space-around | stretch;</li>
</ul>
</li>
<li>子元素<ul>
<li>order 序号</li>
<li>flex-grow 放大</li>
<li>flex-shrink 缩小</li>
<li>flex-basis 占据主轴空间</li>
<li>flex flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto</li>
<li>flex-grow 定义子元素对 元素在 窗口在减去主轴元素长度后 剩余空间的 分配比例</li>
<li>flex-shrink 定义在各个子元素在 不足 空间的减少比例</li>
<li>flex-basis 定义子元素在分配剩余空间之前的元素基本长度<ul>
<li>优先级 max-width &gt;flex-basis &gt; width</li>
</ul>
</li>
<li>align-self 定义该元素与交叉轴不一样的对齐方式 stretch h 和 height 冲突</li>
</ul>
</li>
</ul>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul>
<li><p>绘制三角形 利用盒模型 隐藏不需要的 border 部分</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">border-left</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
<span class="token property">border-right</span><span class="token punctuation">:</span> 50px solid transparent<span class="token punctuation">;</span>
<span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid red<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>不给高充满页面</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
	<span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 或*/</span>
<span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="转数字"><a href="#转数字" class="headerlink" title="转数字"></a>转数字</h4><ul>
<li>undefined -&gt; NaN</li>
<li>null -&gt; 0</li>
<li>boolean true-&gt;1 false-&gt; 0</li>
<li>number x-&gt;x</li>
<li>string ‘’-&gt;0 ‘ ‘-&gt;0 ‘123’-&gt;123 ‘123a’-&gt;NaN ‘aa’-&gt;NaN</li>
<li>object valueOf / toString 转换</li>
</ul>
<h4 id="隐式转换规则"><a href="#隐式转换规则" class="headerlink" title="隐式转换规则"></a>隐式转换规则</h4><ul>
<li><p>x,y 为 null、undefined 两者中一个 // 返回 true</p>
</li>
<li><p>x、y 为 Number 和 String 类型时，则转换为 Number 类型比较。</p>
</li>
<li><p>有 Boolean 类型时，Boolean 转化为 Number 类型比较。</p>
</li>
<li><p>NAN !=NAN // TRUE</p>
</li>
<li><p><code>![]==[] -&gt; true</code> ![] 布尔取反 -&gt; []转布尔为 true ![] 为 false false 转数值为 0 []转数值为 0 所以 0==0<br>同理 <code>!&#123;&#125;==&#123;&#125; -&gt; false</code> 因为 {}转数值为 NAN</p>
</li>
<li><p><code>[]==[] -&gt; false</code> {}=={} -&gt; false 引用类型比较栈中的地址是否相同</p>
</li>
</ul>
<h4 id="JSON-转成-formData"><a href="#JSON-转成-formData" class="headerlink" title="JSON 转成 formData"></a>JSON 转成 formData</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 下面也有可能需要 formData 转 JSON，代码如下：</span>

<span class="token keyword">var</span> jsonData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
formData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>jsonData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul>
<li><p>原型链继承</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am talking...'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> sonObj_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonObj_1<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment">// undefined</span>

<span class="token comment">// 原型链实现继承的关键代码</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> sonObj_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonObj_2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment">// function() &#123;...&#125;</span>

<span class="token comment">// 缺点：</span>

<span class="token comment">// 引用类型的属性被所有实例共享</span>
<span class="token comment">// 在创建Child 的实例时， 不能向Person传参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>经典继承</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 借用构造函数继承（经典继承）</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'xiaopao'</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
child1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// ["red", "blue", "green", "yellow"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// ["red", "blue", "green"]</span>
<span class="token comment">// 优点：</span>
<span class="token comment">// 1.避免了引用类型的属性被所有实例共享</span>
<span class="token comment">// 2.可以在Child中向Parent传参</span>
<span class="token comment">// 缺点：</span>
<span class="token comment">// 1.只是子类的实例，不是父类的实例</span>
<span class="token comment">// 2.方法都在构造函数中定义，每次创建实例都会创建一遍方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>经典组合</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
	<span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// 第二次调用 Parent()</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">&#125;</span>

<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次调用 Parent()</span>

<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'xiaopao'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'lulu'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
child1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// xiaopao</span>
child2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// lulu</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 18</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 19</span>
child1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// ["red", "blue", "green", "yellow"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// ["red", "blue", "green"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1 <span class="token keyword">instanceof</span> <span class="token class-name">Child</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1 <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">//         优点：融合原型链继承和构造函数的优点，是JavaScript中最常用的继承模式</span>
<span class="token comment">//         缺点：调用了两次父类构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="AA1"><a href="#AA1" class="headerlink" title="AA1"></a>AA1</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.trans</span> <span class="token punctuation">&#123;</span>
	<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
	<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
	<span class="token property">transform</span><span class="token punctuation">:</span> all 0.1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'chid'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
	<span class="token string">'click'</span><span class="token punctuation">,</span>
	<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			child<span class="token punctuation">.</span>className <span class="token operator">=</span> child<span class="token punctuation">.</span>className <span class="token operator">+</span> <span class="token string">' trans'</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="AA2"><a href="#AA2" class="headerlink" title="AA2"></a>AA2</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getProtoType</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> obj
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			obj <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通的add函数</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">&#125;</span>

<span class="token comment">// Currying后</span>
<span class="token keyword">function</span> <span class="token function">curryingAdd</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> x <span class="token operator">+</span> y
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token function">curryingAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 实现一个add方法，使计算结果能够满足如下预期：</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">15</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 第一次执行时，定义一个数组专门用来存储所有的参数</span>
	<span class="token keyword">var</span> _args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>

	<span class="token comment">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span>
	<span class="token keyword">var</span> <span class="token function-variable function">_adder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		_args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
		<span class="token keyword">return</span> _adder
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span>
	_adder<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> _args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> a <span class="token operator">+</span> b
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> _adder
<span class="token punctuation">&#125;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 15</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>web</category>
        <category>Q/A</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>mac环境搭建</title>
    <url>/2021/12/02/fe/mac%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>quick start for macos</p>
</blockquote>
<h4 id="homeBrew"><a href="#homeBrew" class="headerlink" title="homeBrew"></a><a href="https://brew.sh/">homeBrew</a></h4><blockquote>
<p>The Missing Package Manager for macOS (or Linux)</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需要有 git</span>
<span class="token comment"># https://gitee.com/cunkai/HomebrewCN?_from=gitee_search</span>

/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="brew-cask"><a href="#brew-cask" class="headerlink" title="brew cask"></a>brew cask</h5><blockquote>
<p>安装部分图形界面软件<br>google chrome , firefox , wps , wechat wechart for work <a href="https://formulae.brew.sh/cask/">more…</a></p>
</blockquote>
<ul>
<li>截图工具<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> snipaste<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>科学上网<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> clashx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>网络代理<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> proxyman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>docker desktop<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh "></a><a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh </a></h4><blockquote>
<p>好用的 shell</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#  install oh-my-zsh</span>
<span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a><a href="https://github.com/nvm-sh/nvm#troubleshooting-on-macos">nvm</a></h4><blockquote>
<p>Version Manager for node</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
brew <span class="token function">install</span> nvm

<span class="token punctuation">..</span>.

<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span><span class="token variable">)</span></span>/opt/nvm/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span><span class="token variable">)</span></span>/opt/nvm/nvm.sh"</span> <span class="token comment"># This loads nvm</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span><span class="token variable">)</span></span>/opt/nvm/etc/bash_completion.d/nvm"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span><span class="token variable">)</span></span>/opt/nvm/etc/bash_completion.d/nvm"</span> <span class="token comment"># This loads nvm bash_completion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><a href="https://github.com/wting/autojump">autojump</a></h4><blockquote>
<p>快速跳转目录</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># install autojump</span>
brew <span class="token function">install</span> autojump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="zshrc"><a href="#zshrc" class="headerlink" title="~/.zshrc"></a>~/.zshrc</h4><pre class="line-numbers language-none"><code class="language-none">...
plugins&#x3D;(
  autojump
)
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h4><ul>
<li><code>command + shift + p</code></li>
<li>输入 <code>install ....code command in path</code></li>
<li><code>enter</code></li>
<li>将<code>code</code>注册到命令行</li>
</ul>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Users/admin/Desktop/code/testdir
<span class="token builtin class-name">cd</span> /xxx/xxx/<span class="token punctuation">..</span>.code/dir
<span class="token builtin class-name">cd</span> ~
j testdir   <span class="token comment"># 自动跳转到 testdir</span>
j <span class="token function">dir</span>   <span class="token comment"># 自动跳转到 dir</span>
code <span class="token builtin class-name">.</span>  <span class="token comment"># 用vscode打开当前目录</span>
code /Users/admin/Desktop/code/testdir  <span class="token comment"># 用vscode打开当testdir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>…更多看文档</p>
</blockquote>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>网络方面的记录</title>
    <url>/2020/08/20/fe/network/</url>
    <content><![CDATA[<h3 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h3><ul>
<li><p>tcp</p>
<ul>
<li>  http</li>
<li>  https</li>
<li>  websocket</li>
</ul>
</li>
<li><p>  udp</p>
</li>
<li><p>  ajax</p>
</li>
<li><p>  fetch</p>
</li>
<li><p>  跨域问题</p>
</li>
</ul>
<h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><ul>
<li>  Hypertext Transfer Protocol</li>
<li>  三次握手</li>
<li>  四次挥手</li>
</ul>
<h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><ul>
<li>  Hypertext Transfer Protocol Secure</li>
<li>  <code>http</code> + <code>ssl</code> + 证书</li>
<li>  对称加密 + 非对称加密</li>
</ul>
<h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><ul>
<li>  <code>XMLHttpRequest</code></li>
<li>  针对超时请求提前终止 ， <code>xhr.abort()</code></li>
<li>  状态回调 <code>xhr.onStateChange</code></li>
<li>  上传进度回调 <code>xhr.upload.onprogress</code></li>
</ul>
<h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><ul>
<li>  默认不带 <code>cookie</code></li>
<li>  返回的数据需要 <code>json</code> 序列化</li>
<li>  只有网络或者服务器错误才触发 <code>reject</code></li>
<li>mode<ul>
<li>  <code>same-origin</code> 不允许</li>
<li>  <code>cors</code> 支持 同域请求不需要后端 cors 支持</li>
<li>  <code>no-cors</code> 用于跨域但服务器不带 cors 响应头</li>
</ul>
</li>
</ul>
<h4 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET / POST"></a>GET / POST</h4><ul>
<li>  POST 数据格式为 <code>json</code> 时，会发送 <code>option</code> 请求，查看服务器情况，再发送真正的 POST 请求 (<code>firefox</code> 只发送一次)</li>
<li>  GET 存在 <code>2048</code> 字节的长度限制,浏览器和服务器限制</li>
<li>  GET 编码只能时 <code>url</code> 编码</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2020/09/16/fe/promise/</url>
    <content><![CDATA[<h1 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h1><ul>
<li>基本用法</li>
<li>Promise.prototype.then()</li>
<li>Promise.prototype.catch()</li>
<li>Promise.prototype.finally()</li>
<li>Promise.all()</li>
<li>Promise.race()</li>
<li>Promise.allSettled()</li>
<li>Promise.any()</li>
<li>Promise.resolve()</li>
<li>Promise.reject()</li>
<li>应用</li>
<li>Promise.try()</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>-</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>SERVICE WORKER</title>
    <url>/2020/04/06/fe/service%20_worker/</url>
    <content><![CDATA[<h3 id="service-workers"><a href="#service-workers" class="headerlink" title="service workers"></a>service workers</h3><ul>
<li>app.js</li>
<li>sw.js</li>
<li>chrome://net-internals/#events</li>
<li>chrome://inspect/#service-workers</li>
</ul>
<h4 id="一般来说，如果看到-provisional-headers-are-shown-这个提示，说明这个请求并没有发送出去"><a href="#一般来说，如果看到-provisional-headers-are-shown-这个提示，说明这个请求并没有发送出去" class="headerlink" title="一般来说，如果看到 provisional headers are shown 这个提示，说明这个请求并没有发送出去"></a>一般来说，如果看到 provisional headers are shown 这个提示，说明这个请求并没有发送出去</h4><ul>
<li>请求被某些扩展如 Adblock 拦截了，请求被浏览器插件拦截。解决方案：用 chrome://net-internals 来帮助你查找被屏蔽的请求以及可能的原因。（本人发现现在这个用不了了）</li>
<li>请求被墙了</li>
<li>走本地缓存或者 dataurl 的请求。强缓存 from disk cache 或者 from memory cache，此时也不会显示</li>
<li>服务器出错或者超时，没有真正的返回。client 发送请求后，由于各种原因，比如网络延迟，server 端逻辑错误，导致 client 端长时间未收到响应。解决方案：改正占用很长时间的 server 端程序。</li>
<li>跨域，请求被浏览器拦截</li>
<li>其他原因</li>
</ul>
<h4 id="img-crossorigin"><a href="#img-crossorigin" class="headerlink" title="img crossorigin"></a>img crossorigin</h4><p>这个属性有两个值可选,需要 server 端在 response 的 header 中带上 Access-Control-Allow-Credentials 属性。</p>
<ul>
<li>anonymous：如果使用这个值的话就会在请求中的 header 中的带上 Origin 属性，但请求不会带上 cookie 和其他的一些认证信息。</li>
<li>use-credentials：这个就同时会在跨域请求中带上 cookie 和其他的一些认证信息。</li>
</ul>
<h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><ul>
<li>max-age&gt;0 时 直接从游览器缓存中 提取</li>
<li>max-age&lt;=0 时 向 server 发送 http 请求确认 ,该资源是否有修改 有的话 返回 200 ,无的话 返回 304.</li>
</ul>
]]></content>
      <categories>
        <category>stroage</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>REACT NATIVE</title>
    <url>/2020/05/01/fe/reactNative/</url>
    <content><![CDATA[<h4 id="文档-https-reactnative-cn"><a href="#文档-https-reactnative-cn" class="headerlink" title="文档 https://reactnative.cn/"></a>文档 <a href="https://reactnative.cn/">https://reactnative.cn/</a></h4><ul>
<li><p>环境搭建</p>
<ul>
<li>node 12.*</li>
<li>python 2.*</li>
<li>android studio</li>
<li>jdk 1.8</li>
<li>npm 设置淘宝镜像</li>
<li>java, python,android sdk 环境变量配置</li>
<li>翻墙 或者 配置 android studio 代理</li>
<li>其余看文档！很重要！</li>
</ul>
</li>
<li><p>运行 android 项目</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token builtin class-name">cd</span> AwesomeProject
<span class="token function">yarn</span> android
<span class="token comment"># 或者</span>
<span class="token function">yarn</span> react-native run-android
<span class="token comment"># 或者</span>
<span class="token function">npm</span> run android<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>node 进程窗口中调试</p>
<ul>
<li><code>R R</code> reload app</li>
<li><code>摇手机</code> 或者 <code>ctrl + M</code> 打开调试菜单</li>
</ul>
</li>
</ul>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul>
<li>默认 flex 布局<ul>
<li>flex-direction : column</li>
</ul>
</li>
<li>四种事件外嵌组件</li>
<li>flatList<ul>
<li>默认有懒加载</li>
</ul>
</li>
<li>image<ul>
<li>require() 引入本地</li>
<li>uri() 链接网络资源</li>
</ul>
</li>
<li>react-navigation<ul>
<li>局部样式 替换 全局样式对象</li>
<li>TabNaviggator Tab 导航</li>
<li>StackNavigator 页面跳转</li>
<li>DrawerNavigator 抽屉侧滑</li>
<li>深层嵌套组件内 用 navigator hook 获取 navigation 对象<ul>
<li>navigation.push() 推入历史记录栈</li>
<li>navigation.navigate() 同上，但多次推入自身，自会记录一次</li>
<li>navigation.goBack() 返回</li>
</ul>
</li>
</ul>
</li>
<li>mobx/ redux</li>
<li>单位适配(width,fontSize)</li>
<li>fetch 封装(不存在跨域问题,注意本地开发时，用本机网络地址)</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>android</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>前端储存</title>
    <url>/2020/04/06/fe/storage/</url>
    <content><![CDATA[<h4 id="localStorage-string"><a href="#localStorage-string" class="headerlink" title="localStorage (string)"></a>localStorage (string)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="sessionStorage-string-关闭窗口后失效"><a href="#sessionStorage-string-关闭窗口后失效" class="headerlink" title="sessionStorage (string) 关闭窗口后失效"></a>sessionStorage (string) 关闭窗口后失效</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="indexedDb"><a href="#indexedDb" class="headerlink" title="indexedDb"></a>indexedDb</h4><h4 id="注意回调函数中-this-指向"><a href="#注意回调函数中-this-指向" class="headerlink" title="注意回调函数中 this 指向"></a>注意回调函数中 this 指向</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//   1. 创建并打开一个数据库</span>
<span class="token keyword">let</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'testdb'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">//  2.  成功回调</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result
<span class="token punctuation">&#125;</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建集合</span>
    <span class="token comment">// 疑似异步</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">'id'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// IDBDatabase.deleteObjectStore()</span>

    <span class="token comment">// var objectStore = db.createObjectStore( 'person', &#123; autoIncrement: true &#125; );</span>
    <span class="token comment">//添加索引</span>
    objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//失败回调</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// console.log('数据库打开报错');</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 3.1. 使用事务操作数据表</span>
<span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zhao6'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'zhadan222gsan@exale.com'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//更新 .put()</span>
<span class="token comment">//删除.delete(key)</span>

task<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// console.log('数据写入成功');</span>
<span class="token punctuation">&#125;</span>
task<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// console.log('数据写入失败');</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//  3.2  使用索引查找</span>
<span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'索引name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'索引key'</span><span class="token punctuation">)</span>
<span class="token comment">//相应的回调略...</span>

<span class="token comment">//删除数据库</span>
<span class="token keyword">var</span> req <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">deleteDatabase</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">)</span>
<span class="token comment">//相应的回调略...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//   src/registerServiceWorker.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> register <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'register-service-worker'</span>
<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'/sw.js'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">registrationOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">'./'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//    public/sw.js    vue-cli3</span>
<span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    <span class="token comment">//版本 static-v1</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'static-v1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">cache</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token comment">//缓存的文件</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'service worker 缓存成功!'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Version now ready to handle'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/*
   *  判断请求路径，查询是否命中cache
   *   命中则从cache返回
   */</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>request<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>stroage</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/2020/07/08/fe/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h3><p><img src="/images/better.jpg" alt="导图"></p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>-</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 安全防范 ，新开页面 window.openner=null  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="优化您的图片"><a href="#优化您的图片" class="headerlink" title="优化您的图片"></a>优化您的图片</h3><ul>
<li>  选择正确的图像格式</li>
<li>  选择正确的压缩级别</li>
<li>  使用 Imagemin 压缩图像 <code>Imagemin</code></li>
<li>  用视频替换 GIF 动画，以加快页面加载速度 <code>FFmpeg</code></li>
<li>  提供响应图像 添加属性 <code>srcset =“ flower-small.jpg 480w，flower-large.jpg 1080w” size =“ 50vw”</code></li>
<li>  提供尺寸正确的图像</li>
<li>  使用 WebP 图像</li>
<li>  使用映像 CDN 优化映像</li>
</ul>
<h3 id="延迟加载的图像和视频"><a href="#延迟加载的图像和视频" class="headerlink" title="延迟加载的图像和视频"></a>延迟加载的图像和视频</h3><ul>
<li>  使用延迟加载来提高加载速度</li>
<li>  延迟加载图像</li>
<li>  延迟加载视频</li>
<li>  Web 的本机图像延迟加载</li>
<li>  使用 lazysizes 延迟加载图像 <code>lazysizes.js</code></li>
</ul>
<h3 id="优化-JavaScript"><a href="#优化-JavaScript" class="headerlink" title="优化 JavaScript"></a>优化 JavaScript</h3><ul>
<li><p>使用 PRPL 模式应用即时加载</p>
<ul>
<li>  推送（或预加载）最重要的资源。<code>rel=&quot;preload&quot;</code></li>
<li>  尽快渲染初始路线。内嵌关键 <code>JavaScript &amp; css</code></li>
<li>  预缓存剩余资产。 <code>service worker</code></li>
<li>  延迟加载其他路由和非关键资产。<code>defer | asnyc</code></li>
</ul>
</li>
<li><p>  通过代码拆分减少 JavaScript 负载 <code>code split</code></p>
</li>
<li><p>  删除未使用的代码 <code>tree shaking</code></p>
</li>
<li><p>  缩小和压缩网络负载 <code>gizp | Brotli</code></p>
</li>
<li><p>  将现代代码提供给现代浏览器以加快页面加载速度 <code>&quot;esmodules&quot;: true</code></p>
</li>
<li><p>  CommonJS 如何使您的捆绑包更大 <code>ECMAScript模块语法</code></p>
</li>
</ul>
<h3 id="优化资源配置-＃"><a href="#优化资源配置-＃" class="headerlink" title="优化资源配置 ＃"></a>优化资源配置 ＃</h3><ul>
<li>  预加载关键资产以提高加载速度 <link rel="preload"></li>
<li>  尽早建立网络连接以提高感知的页面速度 <link rel="preconnect"></li>
<li>  预取资源以加速将来的导航 <link rel="prefetch" /> <link rel="dns-prefetch" /></li>
</ul>
<h3 id="优化您的-CSS-＃"><a href="#优化您的-CSS-＃" class="headerlink" title="优化您的 CSS ＃"></a>优化您的 CSS ＃</h3><ul>
<li>  推迟非关键 CSS <code>延迟加载</code></li>
<li>  缩小 CSS</li>
<li>  提取关键 CSS</li>
<li>  使用媒体查询优化 CSS 背景图像</li>
</ul>
<h3 id="优化您的第三方资源-＃"><a href="#优化您的第三方资源-＃" class="headerlink" title="优化您的第三方资源 ＃"></a>优化您的第三方资源 ＃</h3><ul>
<li>  第三方 JavaScript 性能</li>
<li>  识别缓慢的第三方 JavaScript</li>
<li>  有效加载第三方 JavaScript</li>
</ul>
<h3 id="优化网络字体-＃"><a href="#优化网络字体-＃" class="headerlink" title="优化网络字体 ＃"></a>优化网络字体 ＃</h3><ul>
<li>  避免字体加载过程中出现不可见的文本</li>
<li>  优化 WebFont 的加载和渲染</li>
<li>  减少 WebFont 大小</li>
</ul>
<h3 id="优化网络质量-＃"><a href="#优化网络质量-＃" class="headerlink" title="优化网络质量 ＃"></a>优化网络质量 ＃</h3><ul>
<li>  基于网络质量的自适应服务</li>
</ul>
<h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul>
<li>  减少 http 的请求次数，将多个请求合并成同一个，减少 http 的开销</li>
<li>  base64 图片 / iconfonts</li>
<li>  CDN 分发静态资源</li>
<li>  后台开启 Gzip 压缩 | Brotli</li>
<li>  浏览器缓存策略</li>
<li>  应用储存: service worker/ localstorage</li>
</ul>
<h3 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h3><ul>
<li><p>DOM</p>
<ul>
<li>  img 设置 &lt;img loading=”lazy” src =“ flower-large.jpg” srcset =“ flower-small.jpg 480w，flower-large.jpg 1080w” size =“ 50vw”&gt;</li>
<li>  避免深层次嵌套</li>
<li>  语义化标签 img 加 alt</li>
<li>  尽量避免回流 ( 例如:动态添加多个子元素时,先创建一个容器,向容器中添加子节点,最后再将容器 append 进文档流中 dispay:none 再回复 dislay , 图片给宽高)</li>
</ul>
</li>
<li><p>Css</p>
<ul>
<li>  避免深层级嵌套</li>
<li>  animation / transform</li>
<li>  使用 link 代替 @import(页面加载完成后加载， 阻塞 render tree)</li>
<li>  不要一条条地改变样式，而要通过改变 class，或者 csstext 属性，一次性地改变样式。</li>
</ul>
</li>
<li><p>js</p>
<ul>
<li>  事件代理</li>
<li>  必须 js 控制动画时使用 requestAnimationFrame(淘宝倒计时动画)</li>
<li>  防抖 /节流</li>
</ul>
</li>
</ul>
<h3 id="webpack-层面"><a href="#webpack-层面" class="headerlink" title="webpack 层面"></a>webpack 层面</h3><ul>
<li><p>开发环境</p>
<ul>
<li>  打包构建速度(HMR)</li>
<li>  代码调试(source-map)</li>
</ul>
</li>
<li><p>生产环境</p>
<ul>
<li>打包构建速度<ul>
<li>  使用 oneof</li>
<li>  babel 缓存</li>
<li>  多进程打包</li>
<li>  externals</li>
<li>  dll</li>
</ul>
</li>
<li>代码运行性能<ul>
<li>  缓存(hash-chunkhash-contenthash)</li>
<li>  tree shaking</li>
<li>  code split</li>
<li>  懒加载 / 预加载</li>
<li>  pwa</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><ul>
<li>  Q:分别使用 1,2 网页怎么显示?</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- html --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- css --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">html,
    body</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 1 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 2 --></span>
<span class="token comment">&lt;!-- &lt;script>
    while (true) &#123;&#125;
&lt;/script> --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>  结论 : 第一种方式页面渲染出元素和样式,但是页面卡死 , 第二种页面直接白屏并且卡死,即未渲染</li>
<li>  浏览器渲染是分帧进行的 ,如果在某一帧内 js 代码阻塞,同一帧内的 dom 也不会渲染</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>Q/A</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>部分面试过程</title>
    <url>/2020/09/18/fe/%E8%AE%B0%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h1 id="部分面试过程"><a href="#部分面试过程" class="headerlink" title="部分面试过程"></a>部分面试过程</h1><h2 id="字节篇"><a href="#字节篇" class="headerlink" title="字节篇"></a>字节篇</h2><h3 id="0817-14-00-一面-60-分钟"><a href="#0817-14-00-一面-60-分钟" class="headerlink" title="0817 14:00 一面 60 分钟"></a>0817 14:00 一面 60 分钟</h3><ul>
<li>  vue 原理 ， 手写实现数据劫持 （里面有坑） (代码)</li>
<li>  问了数据劫持，收集依赖的过程 ，实现的方式</li>
<li>  get post 区别 长度限制，请求的次数，谁限制了长度</li>
<li>  文件上传的字符编码类型，之间的区别以及为什么会这样，form 表单默认是谁</li>
<li>  挖项目，为什么要这样做，解决了啥问题</li>
<li>  几个常见状态码 304 引出浏览器强缓存和协商缓存</li>
<li>  谈一个设计散点图的思路，设计，实现，优化方面</li>
<li>  聊了下他们的开发流程，用到的技术</li>
<li>  gg</li>
</ul>
<h3 id="0831-16-00-一面-60-分钟"><a href="#0831-16-00-一面-60-分钟" class="headerlink" title="0831 16:00 一面 60 分钟"></a>0831 16:00 一面 60 分钟</h3><ul>
<li>  css 盒模型哪些，区别</li>
<li>  css 实现一个三角形</li>
<li>  let var 问你输出什么</li>
<li>  js 数组哪些方法 写一个 reduce(没写)</li>
<li>  arr = Array.from({ length: 2 }).fill({ a: 1 }) =&gt; [{a:1},{a:1}]</li>
<li>  promise.then().then() promise.catch().then() ok 不？ promise 其他东西</li>
<li>  实现一个 match 函数 判断括号是否匹配 <code>([&#123;&#125;&#123;&#125;()])</code> (代码)</li>
<li>  反转链表 (代码)</li>
<li>  写一个深拷贝 (代码)</li>
<li>  聊了下为什么没走校招，机会蛮大的</li>
<li>  聊了下他的工作，然后加了个微信，可以给我讲点经验</li>
</ul>
<h3 id="0902-13-00-二面-80-分钟"><a href="#0902-13-00-二面-80-分钟" class="headerlink" title="0902 13:00 二面 80 分钟"></a>0902 13:00 二面 80 分钟</h3><ul>
<li>  js 获取元素在页面中的位置 (代码)</li>
<li>  css 动画 ，js 怎么实现， aniationRequestFrame</li>
<li>  找数组中两个元素和等于 target 的数组 (代码)</li>
<li>  找数组中几个元素和等于 target 的数组 (代码)</li>
<li>  介绍防抖节流 手写防抖 ，里面用到 function.call (代码)</li>
<li>  介绍 call 然后区别 call apply bind</li>
<li>  实现一个 call</li>
<li>  实现一个 new</li>
<li>  什么是同源政策，跨域哪几种 ？具体实现 ？非常非常详细</li>
<li>  http2 新特性 实现的原理</li>
<li>  反向代理 正向代理区别</li>
<li>  浏览器缓存</li>
<li>  vuex 详细介绍</li>
<li>  react 和 vue 区别</li>
<li>  ts 优点</li>
<li>  ts 编译过程，扯了点编译原理</li>
<li>  移动端适配方法，怎么实现响应式，原理</li>
<li>  设计一个 tip 思路，考虑优化 ，扩展</li>
<li>  实现一个单例模式 （代码）</li>
<li>  很流畅</li>
<li>  了解到字节前端岗位进去后，根据部门需要以及个人兴趣爱好分配具体部门</li>
</ul>
<h3 id="0903-14-30-三面-50-分钟"><a href="#0903-14-30-三面-50-分钟" class="headerlink" title="0903 14:30 三面 50 分钟"></a>0903 14:30 三面 50 分钟</h3><ul>
<li>  解释 什么是面向对象 ，要点特性 ，区别</li>
<li>  常用的数据结构，特性 ，区别</li>
<li>  实现双向链表 ，实现一个插入节点的方法 （代码）</li>
<li>  webpack 重要配置 ，loader 和 plugins 区别 ，优化</li>
<li>  n 级台阶的几种路劲 （代码） 思路错了 (其实就一个递归)</li>
<li>  心态崩了 ，面试官脸色不大好看</li>
<li>  七层网络模型</li>
<li>  tcp udp 区别</li>
<li>  浏览器缓存</li>
<li>  keep-alive 原理（自己傻逼了，猜也能猜出来，说了个没深入了解）</li>
<li>  实习过程中自己的不足</li>
<li>  英语四六级</li>
<li>  学习方法过程</li>
<li>  n 皇后 没写 换题了</li>
<li>  返回 n 以内的质数数组 （我想着优化，判断质数条件没写完） 到时间了</li>
<li>  没啥聊的了</li>
<li>  有点压力面的感觉 三面到此结束</li>
</ul>
<h2 id="百度篇"><a href="#百度篇" class="headerlink" title="百度篇"></a>百度篇</h2><h3 id="0811-一面"><a href="#0811-一面" class="headerlink" title="0811 一面"></a>0811 一面</h3><ul>
<li>  一个元素一个按钮,元素垂直居中. 点击按钮后,元素一秒后,水平左右移动 100px 旋转 90 度 动画持续 100ms (代码)</li>
<li>  实现一个函数 , 判断对象中的属性来自哪一个 原型链对象 (代码)</li>
<li>  div 上下布局 底部固定高度 ,顶部自适应 (代码)</li>
<li>  position 值 区别 以及黏性定位 : sticky</li>
<li>  判断一个数组的方法 Array.isArray() / Object.prototype.toString.call() 注意 typeof [] == ‘object’</li>
<li>  事件绑定的方法, 优点 , html 中 onclick / js 中 addEventListener (多个顺序执行) 和 onEvetnt (多个后者覆盖前者)</li>
<li>  事件传递顺序: 父级捕获-&gt; 自身绑定顺序-&gt;父级冒泡</li>
<li>  http 缓存相关 200 304 区别 200 返回 max-age 发现失效 如果有 Last-Modified,则再次向 web 服务器请求时带上头 If-Modified-Since ,服务器对比 If-Modified-Since 和文件最后修改时间 返回 200 或者 304</li>
<li>  网络请求放在什么阶段? / 子组件? 父组件?</li>
<li>  js 中 this 指向问题, 显示修改 this 方式以及区别</li>
<li>  connection:keep-alive 介绍</li>
<li>  前端性能优化 / 打包方面的优化</li>
<li>  linux 查看网络以及端口占用</li>
<li>  linux 杀掉进程</li>
</ul>
<h2 id="注意点-体现程序员的专业和严谨"><a href="#注意点-体现程序员的专业和严谨" class="headerlink" title="注意点(体现程序员的专业和严谨)"></a>注意点(体现程序员的专业和严谨)</h2><ul>
<li><p>知识点考察</p>
<ul>
<li>  回答问题，先委婉简短地说出重点，但是要全部概括，不能漏，然后再深入详细描述(比如七层网络模型)</li>
<li>  让你介绍某个知识点时， 先介绍 ，再谈作用，再说优点，再说缺点，然后怎么弥补缺点(比如 jsonp 跨域)</li>
<li>  实在不会的问题，让面试官换一个，或者问到你的痛点，直接说没去深入了解，赶紧换个题，<code>保证心态</code>。(比如 react diff 算法)</li>
<li>  用词准备，描述到位，注意说法专业 (比如 数据库关系模型 能说 N 对 N ，就别说多对多)</li>
</ul>
</li>
<li><p>编程题</p>
<ul>
<li>  编码题保证编码规范，(缩进，空格，尾随分号)</li>
<li>  算法题要让他看出你有程序员的思维 (先解决 ，再优化)</li>
<li>  新语法啥的都用上 (专业，学以致用，要理解，别一问只会用，不知道原理)</li>
<li>  写注释理清思考的方向 (思路清晰)</li>
</ul>
</li>
<li><p>开放性问题</p>
<ul>
<li>  问你程序员鄙视链怎么看</li>
<li>  程序员 35 老龄化危机怎么看</li>
<li>  怎么学习的 (专业性网站，影响力大的书籍，大牛博客，《c++,从入门到放弃》)</li>
<li>  职业规划</li>
<li>  怎么看待加班</li>
</ul>
</li>
<li><p>其他杂项</p>
<ul>
<li>  算法(leetcode 剑指 offer)<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">算法可视化</a></li>
<li>  linux 命令 (网络 ip，端口占用，文件查找 ，vim 编辑器)</li>
<li>  浏览器原理 (进程 和 线程 通讯)</li>
<li>  js 机制 (预解析，单线程，事件循环 ，运算符优先级)</li>
<li>  还有一些奇葩 bug-</li>
<li>  实习的开发流程和操作规范</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2020/04/01/js/index/</url>
    <content><![CDATA[<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><h3 id="执行上下文的生命周期"><a href="#执行上下文的生命周期" class="headerlink" title="执行上下文的生命周期"></a>执行上下文的生命周期</h3><p>执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段，本文重点介绍创建阶段。</p>
<ul>
<li>创建阶段</li>
</ul>
<p>当函数被调用，但未执行任何其内部代码之前，会做以下三件事：</p>
<p>创建变量对象：首先初始化函数的参数 arguments，提升函数声明和变量声明（变量的声明提前有赖于 var 关键字）。<br>创建作用域链：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链本身包含变量对象。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。<br>确定 this 指向。</p>
<ul>
<li>执行阶段</li>
</ul>
<p>创建完成之后，就会开始执行代码，在这个阶段，会完成变量赋值、函数引用、以及执行其他代码。</p>
<ul>
<li>回收阶段</li>
</ul>
<p>函数调用完毕后，函数出栈，对应的执行上下文也出栈，等待垃圾回收器回收执行上下文。</p>
<h3 id="执行上下文变量对象"><a href="#执行上下文变量对象" class="headerlink" title="执行上下文变量对象"></a>执行上下文变量对象</h3><ul>
<li><p>建立 arguments 对象。检查当前执行上下文中的参数，建立该对象下的属性与属性值。</p>
</li>
<li><p>检查当前执行上下文的函数声明，也就是使用 function 关键字声明的函数。在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用。如果该属性之前已经存在，那么该属性将会被新的引用所覆盖。</p>
</li>
<li><p>检查当前执行上下文中的变量声明，每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为 undefined。如果该变量名的属性已经存在，为了防止同名的函数被修改为 undefined，则会直接跳过，原属性值不会被修改。</p>
</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="一般指向"><a href="#一般指向" class="headerlink" title="一般指向"></a>一般指向</h3><ol>
<li>函数是否在 new 中被调用（new 操作符指向）？</li>
<li>函数是否通过 call、apply、bind 显式指向？</li>
<li>函数是否被当做某个对象的方法而调用（隐式指向）？</li>
<li>若以上都不是的话，使用默认绑定。</li>
</ol>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><ol>
<li> 被忽略的 this</li>
</ol>
<p><code>null</code> 或者<code>undefined</code>作为<code>this</code>指向的对象传入<code>call</code>、<code>apply</code>或者<code>bind</code>，这些值在调用时会被忽略，实际应用的是<strong>默认指向规则</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//>> 2</span>
<span class="token comment">//this指向了window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>隐式指向之隐式丢失</li>
</ol>
<p><strong>隐式丢失最容易在赋值时发生</strong>；隐式丢失发生时，调用这个函数会应用<strong>默认指向规则</strong>。下面再举一段更具迷惑性的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">func</span><span class="token operator">:</span> func <span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span>
o<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//>> 3</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>func <span class="token operator">=</span> o<span class="token punctuation">.</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//>> 2</span>
<span class="token comment">// 赋值表达式 p.func=o.func 的返回值是目标函数的引用，也就是 func 函数的引用</span>
<span class="token comment">// 因此调用位置是 func() 而不是 p.func() 或者 o.func()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li> 箭头函数</li>
</ol>
<p>箭头函数并不是使用<code>function</code>关键字定义的，而是使用被称为“胖箭头”的操作符 <code>=&gt;</code> 定义的。</p>
<p>箭头函数不遵守<code>this</code>的四种指向规则，而是<strong>根据函数定义时的作用域来决定 <code>this</code> 的指向</strong>。何谓“定义时的作用域”？就是你定义这个箭头函数的时候，该箭头函数在哪个函数里，那么箭头函数体内的 this 就是它父函数的 this。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 返回一个箭头函数</span>
  <span class="token keyword">return</span> <span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//this 继承自 func()</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
<span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//>> 2         不是 3 ！</span>

<span class="token comment">// func() 内部创建的箭头函数会捕获调用时 func() 的 this。</span>
<span class="token comment">// 由于 func() 的 this 绑定到 obj1， bar（引用箭头函数）的 this 也会绑定到 obj1，</span>
<span class="token comment">// this一旦被确定，就不可更改，所以箭头函数的绑定无法被修改。（new 也不行！）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2020/04/01/js/ts/</url>
    <content><![CDATA[<h3 id="ts-js-的超集"><a href="#ts-js-的超集" class="headerlink" title="ts js 的超集"></a>ts js 的超集</h3><ul>
<li>静态类型，即编译阶段进行类型检查</li>
<li>通过编译器，增强 js 语法能力</li>
<li>与 ECMAScript 同步发展。</li>
</ul>
<h3 id="Ts-语法-基础"><a href="#Ts-语法-基础" class="headerlink" title="Ts 语法 基础"></a>Ts 语法 基础</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 类型注解</span>
<span class="token keyword">let</span> <span class="token literal-property property">var1</span><span class="token operator">:</span> string

<span class="token comment">// 类型推论</span>
<span class="token keyword">const</span> var2 <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token comment">// var2 = 'sss'</span>

<span class="token comment">// 原始类型： string number boolean undefined null symbol void ...</span>
<span class="token keyword">let</span> <span class="token literal-property property">var3</span><span class="token operator">:</span> string <span class="token operator">|</span> number

<span class="token comment">// 类型数组</span>
<span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 元组</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 运行正常</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">]</span> <span class="token comment">// 报错</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出 Runoob</span>

<span class="token comment">// 任意类型</span>
<span class="token keyword">let</span> <span class="token literal-property property">varAny</span><span class="token operator">:</span> any

<span class="token comment">// 枚举</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> <span class="token literal-property property">c</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>

<span class="token comment">// never</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> never
<span class="token keyword">let</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number
x <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// 运行错误，数字类型不能转为 never 类型</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 运行正确，never 类型可以赋值给 never类型</span>
y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 运行正确，never 类型可以赋值给 数字类型</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">message</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">&#123;</span>
  <span class="token comment">// 返回值为 never 的函数可以是抛出异常的情况</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">&#123;</span>
  <span class="token comment">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 函数类型约束, string参数类型， number返回类型</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">233</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// void类型(没有返回值)</span>
<span class="token keyword">function</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 对象object, 不是原始类型就是对象类型</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">o</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 正确的姿势</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> number <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 传入的参数必须有props属性</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 类型别名type，自定义类型</span>
type Prop <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">props</span><span class="token operator">:</span> number <span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">o</span><span class="token operator">:</span> Prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 等同于fn2</span>

<span class="token comment">// type 和interface的区别, 基本上完全相同</span>

<span class="token comment">// 类型断言 短暂欺骗编译校验</span>
<span class="token keyword">const</span> <span class="token literal-property property">someValue</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token string">'this is a string'</span>
<span class="token keyword">const</span> strLen <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length

<span class="token comment">// 联合类型</span>
<span class="token keyword">let</span> <span class="token literal-property property">union</span><span class="token operator">:</span> string <span class="token operator">|</span> number
union <span class="token operator">=</span> <span class="token string">'1'</span>
union <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 交叉类型 主要作用是拓展类型</span>
type First <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">first</span><span class="token operator">:</span> number <span class="token punctuation">&#125;</span>
type Second <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">second</span><span class="token operator">:</span> number <span class="token punctuation">&#125;</span>
<span class="token comment">// 拓展新的type</span>
type FirstAndSecond <span class="token operator">=</span> First <span class="token operator">&amp;</span> Second
<span class="token keyword">function</span> <span class="token function">fn4</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">param</span><span class="token operator">:</span> FirstAndSecond</span><span class="token punctuation">)</span><span class="token operator">:</span> FirstAndSecond <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token comment">// fisrt 和second 必须都有</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 函数</span>
<span class="token comment">/**
 * 1. 设置了参数就是必填参数
 * 2. 默认值
 * 3. 可选参数，位置一般是放在参数的最后
 */</span>
<span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span>person<span class="token operator">:</span> string<span class="token punctuation">,</span> msg <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> msg2<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">''</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 函数重载 和java类似： 场景主要是源码和框架，函数用参数的类型、个数、返回值的类型来区分同名的函数</span>
<span class="token comment">// 先声明，在实现</span>
<span class="token comment">// 同名的声明可以有多个</span>
<span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token function-variable function">cb1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token function-variable function">cb1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function-variable function">cb2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v1</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">v2</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token comment">// 实现</span>
<span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token function-variable function">cb1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> cb2<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v1</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">v2</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb1 <span class="token operator">&amp;&amp;</span> cb2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行重载2</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行重载1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// class</span>
<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> _foo <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token comment">// 私有属性，不能在类的外部访问</span>
  <span class="token keyword">protected</span> bar <span class="token operator">=</span> <span class="token string">'bar'</span> <span class="token comment">// 保护属性，可以在子类中访问</span>
  <span class="token comment">// 参数属性:构造函数参数加修饰符，能够定义为成员属性</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> tua <span class="token operator">=</span> <span class="token string">'tua'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token comment">// 方法也有修饰符</span>
  <span class="token comment">// private someMethod() &#123; &#125;</span>
  <span class="token comment">// 存取器:属性方式访问，可添加额外逻辑，控制读写性</span>
  <span class="token keyword">get</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_foo
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">set</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_foo <span class="token operator">=</span> val
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 接口仅约束结构，不要求实现，使用更简单</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> string
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> string
<span class="token punctuation">&#125;</span>
<span class="token comment">// greeting函数通过Person接口约束参数解构</span>
<span class="token keyword">function</span> <span class="token function">greeting1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">person</span><span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName
<span class="token punctuation">&#125;</span>
<span class="token function">greeting1</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'User'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 正确</span>
<span class="token comment">// greeting1(&#123;firstName: 'Jane'&#125;); // 错误</span>

<span class="token comment">// 泛型</span>
<span class="token comment">// 不用泛型</span>
<span class="token comment">// interface Result &#123;</span>
<span class="token comment">// ok:0|1;</span>
<span class="token comment">//   data: Feature[];</span>
<span class="token comment">// &#125;</span>

<span class="token comment">// 使用泛型</span>
<span class="token keyword">interface</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 泛型方法</span>
<span class="token keyword">function</span> getResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Result<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 用尖括号方式指定T为string</span>
getResult<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token comment">// 用类型推断指定T为number</span>
<span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">//  命名空间  模块    ///指令</span>
<span class="token comment">// IShape.ts</span>
namespace Drawing <span class="token punctuation">&#123;</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IShape</span> <span class="token punctuation">&#123;</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// &lt;reference path = "IShape.ts" /></span>
namespace Drawing <span class="token punctuation">&#123;</span>
  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Circle is drawn'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义模块</span>
<span class="token comment">// IShape.ts</span>
module Module_Name <span class="token punctuation">&#123;</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StringValidator</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//声明接口对外部可以使用</span>
    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">//定义模块</span>

<span class="token comment">// 导入模块</span>
<span class="token keyword">import</span> shape <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./IShape'</span><span class="token punctuation">)</span>
<span class="token comment">// 声明文件以 .d.ts 为后缀，例如：</span>
runoob<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
<span class="token comment">// 声明文件或模块的语法格式如下：</span>
declare module Module_Name <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// TypeScript 引入声明文件语法格式：</span>
<span class="token comment">/// &lt;reference path = " runoob.d.ts" /></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>2022</title>
    <url>/2023/10/16/life/2022/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2022</th>
<th align="center">2023</th>
</tr>
</thead>
<tbody><tr>
<td align="center">✨</td>
<td align="center">🏂 🚴 😷</td>
<td align="center">🏊 📖 🇬🇧</td>
</tr>
<tr>
<td align="center">💻</td>
<td align="center">node rust k8s</td>
<td align="center"></td>
</tr>
</tbody></table>
<p><img src="https://static.yanstars.site//ridegogoog.png" alt="自然选择"></p>
<blockquote>
<p>艺画天开 你挂倒档？</p>
</blockquote>
]]></content>
      <categories>
        <category>+ life</category>
      </categories>
      <tags>
        <tag>+ life</tag>
      </tags>
  </entry>
  <entry>
    <title>G318川藏南线</title>
    <url>/2023/09/01/life/%E5%B7%9D%E8%97%8F%E7%BA%BF/</url>
    <content><![CDATA[<blockquote>
<p>你不是征服了这片土地 你只是战胜了自己</p>
</blockquote>
<iframe  width="100%" height="500" src="//player.bilibili.com/player.html?aid=274726909&bvid=BV1qF411Z7qm&cid=1231741464&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h3 id="日程安排"><a href="#日程安排" class="headerlink" title="日程安排"></a>日程安排</h3><p><img src="https://pic2.zhimg.com/v2-18d2ab381ccf5f7d86d420c78ee2902d_r.jpg" alt="海拔图"></p>
<ol>
<li>成都</li>
<li>天全</li>
<li>康定</li>
<li>雅江</li>
<li>相格宗 （休息半天）</li>
<li>理塘</li>
<li>巴塘</li>
<li>芒康</li>
<li>容许 （休息一天）</li>
<li>邦达</li>
<li>八宿 （搭车）</li>
<li>然乌</li>
<li>古乡</li>
<li>鲁朗</li>
<li>巴河</li>
<li>加兴</li>
<li>拉萨</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>随时戴好头盔 注意防晒保暖 （天气变化很快）</li>
<li>隧道慢行 打开车头灯尾灯 （高尔寺隧道左侧有风道可以通过）</li>
<li>尽量在早上出发爬山，根据距离准备好干粮 ， （下午爬山随时可能下雨大风）</li>
<li>高海拔多休息，坚持但不要死撑，搭车并不丢人。</li>
</ul>
<h3 id="24-天规划路书"><a href="#24-天规划路书" class="headerlink" title="24 天规划路书"></a>24 天规划路书</h3><p>从右向左看， 骑行里程有数字的代表当天的休息点 ， 数字代表当日的里程数</p>
<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/haiba.jpg" alt="海拔图"></li>
</ul>
]]></content>
      <categories>
        <category>+ life</category>
      </categories>
      <tags>
        <tag>+ life</tag>
      </tags>
  </entry>
  <entry>
    <title>骑行</title>
    <url>/2023/10/16/life/%E9%AA%91%E8%A1%8C/</url>
    <content><![CDATA[<h3 id="种子"><a href="#种子" class="headerlink" title="种子"></a>种子</h3><blockquote>
<p>《不去会死！》 石田裕辅 2010</p>
</blockquote>
<blockquote>
<p>既然降生到这世上，我就要好好看看它，找到属于自己的世界第一！</p>
</blockquote>
<blockquote>
<p>石田裕辅原是普通上班族，小学时在路边看到一位青年骑着载满行囊的自行车飞驰而过，那身影成为他潜意识里追逐的形象。于是长大后发下“不去会死”的豪语，辞掉人人称羡的大企业工作，踏上世界之旅。</p>
</blockquote>
<blockquote>
<p>但石田在第一站阿拉斯加就被黑人女生勒索一美元，吓得皮皮挫，躲在青年旅馆不敢出门；在秘鲁沙漠被持枪强盗抢个精光，还得横度暴风地狱巴塔哥尼亚；在北极圈为了省钱洗露天冰河澡……就这样几度软弱，几度山穷水尽，几度想放弃，最后终于完成壮阔的五大洲完骑世界记录。</p>
</blockquote>
<blockquote>
<p>“我看到恒河的纯白日出、萨宾娜天真无邪的笑脸、土耳其那尔汀美丽的笑容；满月下的金字塔、在草原上奔跑的长颈鹿、骑著破烂脚踏车追赶我的保保。泰西亚有点恼怒地笑著，流下稚气未脱的泪水。大海般的丛林中浮现蒂卡尔神殿，以及纪念碑大谷地神圣的风光。雄壮的育空河流淌而过，有鲑鱼跳跃著；在夜空中摇曳的极光……”经历过许多生死绝境、哀痛的别离、幸福的瞬间后，“活著真好”的体悟，是梦想带给作者最珍贵的礼物</p>
</blockquote>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li>《不会去死》</li>
<li>成都天府绿道</li>
<li>疫情 公共交通受限</li>
<li>缺少锻炼</li>
</ul>
<h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><ul>
<li>公路车 🚴‍♀️ <img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E9%A6%96%E9%92%A2%E5%A4%A7%E6%A1%A5-%E5%8D%95%E8%BD%A6" alt="bike-首钢大桥"></li>
<li>头盔 🪖</li>
<li>insta 360 x2</li>
</ul>
<h3 id="🌞🌛"><a href="#🌞🌛" class="headerlink" title="🌞🌛"></a>🌞🌛</h3><ul>
<li>成都环城绿道 ✅ 100km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E5%A4%A9%E5%BA%9C%E8%B7%AF%E9%81%93-%E7%8E%AF%E7%90%83%E4%B8%AD%E5%BF%83" alt="环球中心"></li>
</ul>
</li>
<li>长安街 ✅ 15km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E9%95%BF%E5%AE%89%E8%A1%97-%E5%A4%A9%E5%AE%89%E9%97%A8" alt="天安门"></li>
</ul>
</li>
<li>亦庄 ✅ 40km</li>
<li>首钢大桥 ✅ 75km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E9%A6%96%E9%92%A2%E5%A4%A7%E6%A1%A5" alt="桥"></li>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E9%A6%96%E9%92%A2%E5%A4%A7%E8%B7%B3%E5%8F%B0" alt="大跳台"></li>
</ul>
</li>
<li>雁栖湖 ✅ 145km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E9%9B%81%E8%A5%BF%E6%B9%96-%E6%B8%B8%E8%88%B9" alt="雁栖湖"></li>
</ul>
</li>
<li>明十三陵 ✅ 146km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E5%8D%81%E4%B8%89%E9%99%B5-%E7%9F%B3%E7%A2%91-%E8%BD%A6" alt="坐骑"></li>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E6%98%8E%E5%8D%81%E4%B8%89%E9%99%B5-%E7%9F%B3%E7%A2%91" alt="十三陵"></li>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride%2F%E6%98%8E%E5%8D%81%E4%B8%89%E9%99%B5-%E8%BD%A6%E9%98%9F" alt="偶遇车队"></li>
</ul>
</li>
<li>戒台寺 ✅ 92km<ul>
<li><img src="https://yanstars-1300150062.cos.ap-beijing.myqcloud.com/ride/%E6%88%92%E5%8F%B0%E5%AF%BA.jpg" alt="戒台寺-爬坡"></li>
</ul>
</li>
<li>妙峰山</li>
</ul>
]]></content>
      <categories>
        <category>+ life</category>
      </categories>
      <tags>
        <tag>+ life</tag>
      </tags>
  </entry>
  <entry>
    <title>滑雪入坑指南</title>
    <url>/2022/03/05/life/%E6%BB%91%E9%9B%AA/</url>
    <content><![CDATA[<p>Avicii  的 <a href="https://music.163.com/song?id=29460357&userid=432995107">The Nights</a> 有两句歌词</p>
<blockquote>
<p>He said, one day you’ll leave this world behind<br>So live a life you will remember</p>
</blockquote>
<p>所以，这个冬天(为了积极响应国家三亿人上冰雪的号召)，2021-01-02 我去滑雪了。</p>
<p>01.04入手了一整套装备 , 在后续的过程中遇到很多问题并且对滑雪有了更深入的了解 , 一一记录如下</p>
<h3 id="安全第一（头盔-）"><a href="#安全第一（头盔-）" class="headerlink" title="安全第一（头盔!!!!!!）"></a>安全第一（头盔!!!!!!）</h3><blockquote>
<p>滑雪不规范 害人又害己<br>tmd别人世界冠军都戴头盔 一些装逼sb不要狗命gg了不要紧 留别人保险公司、管理方一堆麻烦</p>
</blockquote>
<ul>
<li>戴头盔!!!!!! 戴头盔!!!!!! 戴头盔!!!!!!!</li>
<li>不要放板冲坡！</li>
<li>不要坐在雪道中间!</li>
<li>不要停留在弯道等视线盲区!</li>
<li>不要提前抬起缆车保护杠!</li>
<li>结伴滑雪 相互照应</li>
</ul>
<h3 id="🏂-OR-🎿-（头盔-）"><a href="#🏂-OR-🎿-（头盔-）" class="headerlink" title="🏂   OR  🎿  （头盔!!!!!!）"></a>🏂   OR  🎿  （头盔!!!!!!）</h3><ul>
<li>🏂 前期难 后期简单 适合公园动作, 长雪道太累了</li>
<li>🎿 前期简单  后期难  都能hold</li>
</ul>
<h3 id="买装备？（头盔-）"><a href="#买装备？（头盔-）" class="headerlink" title="买装备？（头盔!!!!）"></a>买装备？（头盔!!!!）</h3><blockquote>
<p>确定入坑、新手学习、理性消费的前提 有钱任性就算了<br>答案是必须的  俗话说技术不够装备来凑😄<br>固定的装备更利于自己排除外界变量影响从而专注于学习过程<br>🌟 代表优先级和重要程度</p>
</blockquote>
<ul>
<li>🌟🌟🌟🌟🌟🌟🌟🌟🌟 头盔!!!!(能固定雪镜)  护膝  护臀  护腕 小乌龟 </li>
<li>🌟🌟🌟  雪鞋 雪袜 面罩 手套(防水 能固定在手腕) 冷帽</li>
<li>雪服(袖口能放雪卡)</li>
<li>固定器 雪板 </li>
<li>雪板包 饺子皮 运动小腰包</li>
<li>运动相机</li>
</ul>
<h3 id="北京雪场-（头盔-）"><a href="#北京雪场-（头盔-）" class="headerlink" title="北京雪场 （头盔!!!!）"></a>北京雪场 （头盔!!!!）</h3><p>初学就简单推荐这三, 实际看情况 </p>
<ul>
<li>怀北 适合所有级别 没有公园</li>
<li>南山 公园道具</li>
<li>渔阳 适合所有级别 公园道具</li>
</ul>
<p>周边</p>
<ul>
<li> 崇礼(今年因冬奥会关门了)</li>
</ul>
<p>雪票</p>
<ul>
<li>官方公众号 ，微信小程序</li>
<li>美团</li>
<li>抖音</li>
<li>群友转出</li>
</ul>
<h3 id="怎么出行-（头盔-）"><a href="#怎么出行-（头盔-）" class="headerlink" title="怎么出行 （头盔!!!!）"></a>怎么出行 （头盔!!!!）</h3><ul>
<li>自己开车或者朋友有车</li>
<li>找一些雪友拼车群</li>
<li>找旅游团</li>
</ul>
<h3 id="教练-OR-自学-？（头盔-）"><a href="#教练-OR-自学-？（头盔-）" class="headerlink" title="教练 OR  自学 ？（头盔!!!!!!!）"></a>教练 OR  自学 ？（头盔!!!!!!!）</h3><ul>
<li>🏂 前期还是来个教练吧 不然摔哭</li>
<li>自学 <ul>
<li>小破站  楚格山里人</li>
<li>小破站  黄嘉蓝</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>+ life</category>
      </categories>
      <tags>
        <tag>+ life</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 相关</title>
    <url>/2020/01/01/os/centos/</url>
    <content><![CDATA[<h3 id="查询端口占用"><a href="#查询端口占用" class="headerlink" title="查询端口占用"></a>查询端口占用</h3><ul>
<li><p>lsof -i:80</p>
</li>
<li><p>netstat -nlp|grep :80</p>
</li>
<li><p>ps -ef | grep 8246</p>
</li>
<li><p>ps -x | grep 8246</p>
</li>
<li><p>kill -9 pid</p>
</li>
</ul>
<h3 id="相关环境"><a href="#相关环境" class="headerlink" title="相关环境"></a>相关环境</h3><ul>
<li>docker</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%951">使用 gitlab 测试邮件通知的时候报错</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%952">docker 启动容器报错: the input device is not a TTY</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%953">ssh 免密登录后登录仍然需要密码</a></li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li>crontab(定时任务)</li>
</ul>
<p><code>* * * * * commond</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/sbin/service crond start
/sbin/service crond stop
/sbin/service crond restart
/sbin/service crond reload
 <span class="token function">crontab</span> -l；
 <span class="token function">crontab</span> -e；
 <span class="token function">crontab</span> <span class="token parameter variable">-r</span>
 <span class="token function">service</span> crond status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="问题记录-1"><a href="#问题记录-1" class="headerlink" title="问题记录 1"></a>问题记录 1</h3><ul>
<li>使用 gitlab 测试邮件通知的时候报错</li>
</ul>
<blockquote>
<p>sendmail: fatal: parameter inet_interfaces: no local interface &gt;found for ::1</p>
</blockquote>
<ul>
<li>修改这个文件</li>
</ul>
<p><code>vim /etc/postfix/main.cf</code></p>
<ul>
<li>把下面两行</li>
</ul>
<pre class="line-numbers language-config" data-language="config"><code class="language-config">inet_interfaces &#x3D; localhost
inet_protocols &#x3D; all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>改为</li>
</ul>
<pre class="line-numbers language-config" data-language="config"><code class="language-config">inet_interfaces &#x3D; all
inet_protocols &#x3D; all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>再重启 postfix</li>
</ul>
<p><code>service postfix start</code></p>
<ul>
<li>查看任务日志</li>
</ul>
<p><code>vim /var/spool/mail/root</code></p>
<p><a href="https://blog.csdn.net/github_37673306/java/article/details/84755551">原文链接</a></p>
<h3 id="问题记录-2"><a href="#问题记录-2" class="headerlink" title="问题记录 2"></a>问题记录 2</h3><blockquote>
<p><code>15 8 * * * docker run --shm-size 1G -i -t --rm -v /root/popu/index.js:/app/index.js alekzonder/puppeteer:latest</code><br>定时任务 docker 启动容器报错<br>报错：the input device is not a TTY</p>
</blockquote>
<p>方案: 任务启动容器命令中去掉 <code>-t</code> 参数<br><code>15 8 * * * docker run --shm-size 1G -i --rm -v /root/popu/index.js:/app/index.js alekzonder/puppeteer:latest</code></p>
<p><a href="https://www.cnblogs.com/killall007/p/9494189.html">原文链接</a></p>
<ul>
<li>docker 任务</li>
</ul>
<p><code>15 8 * * * docker run --shm-size 1G -i --rm -v /root/popu/index.js:/app/index.js alekzonder/puppeteer:latest</code></p>
<p>修改目录结构</p>
<p><code>docker run --shm-size 1G --rm -v /root/popu:/app alekzonder/puppeteer:latest node my_script.js</code><br><code>docker run --shm-size 1G --rm -v /root/mydocker/popp:/app alekzonder/puppeteer:latest node app.js</code></p>
<h3 id="问题记录-3"><a href="#问题记录-3" class="headerlink" title="问题记录 3"></a>问题记录 3</h3><p>关于配置 ssh 免密登录后仍然需要密码的解决问题</p>
<ul>
<li>sshd_config 禁用 root 账户登录</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span>  /etc/ssh/sshd_config
PermitRootLogin <span class="token function">yes</span> <span class="token comment">#允许root 免密登录</span>
PubkeyAuthentication <span class="token function">yes</span> <span class="token comment"># 允许免密登录</span>
AuthorizedKeysFile .ssh/authorized_keys  <span class="token comment"># 密钥位置</span>
AuthorizedPrincipalsFile none
AuthorizedKeysCommand none
AuthorizedKeysCommandUser nobody<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>/.ssh 权限问题</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh/
<span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>重启 ssd 服务</li>
</ul>
<p><code>service sshd restart</code></p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>deepin 相关</title>
    <url>/2020/07/09/os/deepin/</url>
    <content><![CDATA[<h3 id="deepin"><a href="#deepin" class="headerlink" title="deepin"></a>deepin</h3><ul>
<li>  开机黑屏 显卡驱动问题</li>
<li>  无法关机 直接卡死 显卡驱动</li>
<li>  创建用户权限 和 ubuntu 类似</li>
</ul>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>macos环境相关</title>
    <url>/2020/09/04/os/macos/</url>
    <content><![CDATA[<h3 id="mac-os"><a href="#mac-os" class="headerlink" title="mac os"></a>mac os</h3><ul>
<li>zsh</li>
<li>wget</li>
<li>brew</li>
<li>nvm</li>
<li>docker</li>
<li>yabai</li>
<li>skhd</li>
</ul>
<h3 id="网络端口信息"><a href="#网络端口信息" class="headerlink" title="网络端口信息"></a>网络端口信息</h3><pre class="line-numbers language-none"><code class="language-none">lsof -n -P -i TCP -s TCP:LISTEN | grep 8888
netstat -nat | grep 8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 使用</title>
    <url>/2020/10/23/os/ubuntu/</url>
    <content><![CDATA[<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><ul>
<li>18.0</li>
<li>20.0</li>
</ul>
<h3 id="启动-u-盘制作"><a href="#启动-u-盘制作" class="headerlink" title="启动 u 盘制作"></a>启动 u 盘制作</h3><ul>
<li>下载镜像文件： 网易镜像站</li>
<li>启动优盘制作</li>
</ul>
<blockquote>
<p>macos 磁盘管理工具，选择镜像还原 超级快</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li><p>分区</p>
<ul>
<li>/</li>
<li>/ boot 2G</li>
<li>/ 交换空间 两倍内存</li>
<li>/ usr</li>
<li>/ home</li>
<li>/ vsr 尽可能大</li>
</ul>
</li>
<li><p>问题记录</p>
<ul>
<li>u 盘安装时，缺少文件 - 改名 : /etc/boot/mmx64</li>
</ul>
</li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li>git</li>
<li>docker</li>
<li>hide the top bar</li>
<li>v2rayL</li>
<li>nvm</li>
<li>put window<blockquote>
<p>注意 zsh / ohmyzsh 中 nvm 的环境便利那个配置<br>若报错 删掉 ～/.nvm 重新安装</p>
</blockquote>
</li>
</ul>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4>]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows环境</title>
    <url>/2020/04/15/os/win/</url>
    <content><![CDATA[<ul>
<li>wox</li>
<li>everything</li>
<li>git</li>
<li>sourcetree</li>
<li>nvm-forwindows</li>
<li>mobaxterm</li>
<li>vscode</li>
<li>docker</li>
<li>坚果云</li>
<li>cmder</li>
<li>ApowerRECPortable</li>
<li>navicat</li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#win10-%E4%BC%81%E4%B8%9A%E7%89%88-LTSC%E6%97%A0%E6%B3%95%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7">win10-企业版-LTSC 无法切换用户</a></li>
<li><a href="#%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-chromeGo">科学上网-chromeGo</a></li>
</ul>
<h5 id="win10-企业版-LTSC-无法切换用户"><a href="#win10-企业版-LTSC-无法切换用户" class="headerlink" title="win10-企业版-LTSC-无法切换用户"></a>win10-企业版-LTSC-无法切换用户</h5><p>1.添加了个新用户 <code>visitor</code> 然后注销现在的用户 <code>root</code> 登陆<code>visitor</code></p>
<p>2.报错:</p>
<blockquote>
<p><font  color='red'> User Profile Service 服务未能登录，无法加载用户配置文件</font></p>
</blockquote>
<p>错了就错了，于是想着返回 root 账户就算了，然后发现我这个 在登陆界面没有 <strong>选择其他用户</strong> 功能 也没有<strong>返回的箭头</strong></p>
<p>3.懵了！各种尝试:<code>ctrl + alt + delete</code> 关机 重启 win10 安全模式启动 各种办法都没用 就是显示 visitor 让你输入密码 ，不给你切换用户的机会</p>
<p>4.赶紧查了一下,发现很多人遇到了这个问题,没找到解决办法。但是发现了很多活跃在各种某度知道，某之家，某吧的傻(zhi)逼 (zhang)瞎子 nc 军团的到处复制粘贴回答,</p>
<blockquote>
<p>什么 进桌面 进命令行 进注册表 进设置 进 nm 啊进 别人问题很清楚,登陆界面，还没进去。天天 xjb 复制粘贴。</p>
</blockquote>
<p>5.最后找到了一个优秀大哥的解决办法,成功进来了。<a href="https://zhidao.baidu.com/question/1770296959514572980.html">源地址</a></p>
<h6 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h6><p>1：制作一个启动安装盘，想办法进入命令提示符界面<br>2：进入系统盘符，如：C:<br>3：再进入 <code>C:\windows\system32</code><br>4：分别键入如下命令：</p>
<p><code>Copy sethc.exe sethc_bk.exe</code><br><code>Copy /y cmd.exe sethc.exe</code><br><code>Net user administrator xxx</code>（ xxx 是新密码）</p>
<blockquote>
<p>最后一条命令时提示我的 <code>Net</code> 和系统版本不兼容，没成功,所以我自己忽略了</p>
</blockquote>
<p>5：重启，进入登录界面<br>6：连续按 5 次 <code>shift</code> 键，在登录界面会出现命令提示符界面。<br>7：运行 <code>netplwiz</code>（配置组和用户界面），在用户界面启用属 <code>administrator</code> 用户</p>
<blockquote>
<p>成功进来,看到了自己的<code>root</code>和<code>visitor</code>两个用户，但是没找到启用的方法<br>随后我尝试删除了 <code>visitor</code>用户</p>
</blockquote>
<p>8：重启，输入 <code>administrator</code> 的密码 xxx 既可进入 <code>windows</code></p>
<blockquote>
<p>这里我还是显示<code>visitor</code>的登陆界面,再一次重复了 6,7 步骤。同时设置<code>root</code>用户免密登陆，重启！</p>
</blockquote>
<p>9：系统还原到你想要的点，完成！</p>
<blockquote>
<p>没有提示输入密码,成功回到了 <code>root</code>桌面<br>有钱了还是换个正版吧,应该之前清理电脑又把什么配置文件，注册表，系统服务啥啥的破坏了。然后在查看 User Profile Service 服务时，还发现了 2345 看图王 的服务注册信息。真是吐了，臭名昭著。<br>最后感谢这个大哥。<a href="https://zhidao.baidu.com/question/1770296959514572980.html">源地址</a></p>
</blockquote>
<h4 id="关于-win10-中-vscode-远程开发-ssh-连接-远程主机的遇到的问题"><a href="#关于-win10-中-vscode-远程开发-ssh-连接-远程主机的遇到的问题" class="headerlink" title="关于 win10 中 vscode 远程开发 ssh 连接 远程主机的遇到的问题"></a>关于 win10 中 vscode 远程开发 ssh 连接 远程主机的遇到的问题</h4><p>首先说会遇到的问题 :</p>
<ul>
<li>问题 1:<code>Bad owener or permission on ..</code></li>
<li>问题 2: <code>&quot;WARNING: UNPROTECTED PRIVATE KEY FILE!&quot;</code></li>
<li>问题 3: 在 <code>vscode</code> 终端提示 管道符写入失败</li>
</ul>
<p>先说 问题 1 和 问题 2 。</p>
<ul>
<li><code>vscode</code> 远程开发时 会使用优先 windows 自带的 <code>openssh</code> 向远程主机 <code>ssh</code> 进行连接。</li>
<li>而连接的主机 名称 ip 配置信息都默认保存在 user/.ssh/config 这个文件中</li>
<li>原因就是 <code>openssh</code> 在读写 user/.ssh/config 这个文件时，发生了文件的权限问题。导致 <code>openssh</code> 读取 config 配置信息失败，所以连接自然就失败了。</li>
<li>同样， 在 win10 cmd 和 <code>powershell</code> 中 ，运行 <code>ssh</code> 时，系统优先会使用 <code>openssh</code> 这个工具而不是 git 自带的 <code>ssh</code> 工具。所以也会出现<code>Bad owener or permission on ..</code>的问题。所以在 cmd 和<br><code>powershell</code> 中 ，你同样会连接失败。</li>
<li>所以，归根结底就是 <code>openssh</code> 的问题。</li>
</ul>
<p>那么针对 <code>vscode</code> 远程开发 连接失败的问题, 解决办法就有多种了.</p>
<ul>
<li>Q1.既然 <code>vscode</code> 默认使用 <code>openssh</code> 进行连接。 而使用系统自带的 <code>openssh</code> 又会出现问题。那 <code>vscode</code> 中咱就不用 <code>openssh</code></li>
</ul>
<blockquote>
<p>A1： 让 <code>vscode</code> 远程开发插件不使用 win 系统默认的 <code>ssh</code> 工具(<code>openssh</code>)，修改 <code>vscode</code> 插件 remote 的配置信息 remote ssh：path 为 git 的 <code>ssh</code> 目录。这样的话 <code>vscode</code> 可以进行远程连接。 git 可以远程连接 。但是使用 cmd ，<code>powershell</code> 连接时同样会出现 <font color=red>问题 1 </font>的情况。</p>
</blockquote>
<ul>
<li>Q2.如果 vscode 仍要使用默认的 <code>openssh</code> 进行连接，上面说到了 ，<code>vscode</code> 在使用 <code>openssh</code> 连接时默认使用配置文件/user/.ssh/config。然而问题就出在了这个文件。那咱就不用这个文件。</li>
</ul>
<blockquote>
<p>A2：细心的人已经发现了，在 <code>vscode</code>中,选择配置文件时，有三个选项。【/user/.ssh/config】, 【c:/programData/ssh/config】(备注，这个文件在系统 c 盘中可能会不存在), 【用户自定义一个文件】。 修改 <code>vscode</code> 中插件 remote 的配置 remote ssh：config file 为 c:/programData/ssh/config。 这样 <code>vscode</code>中可以连接成功。但是 win10 中 cmd 和 <code>powershell</code> 不能连接。</p>
</blockquote>
<ul>
<li>Q3.修改 win10 系统的默认 <code>ssh</code> 连接工具为 git 的 <code>ssh</code> 工具。(区别 Q1- Q1 是在 <code>vscode</code> 中修改 <code>vscode</code> 默认 <code>ssh</code> 连接工具，配置完成后，<code>vscode</code> 可以连接，但是 win10 中 cmd 和 <code>powershell</code> 不能连接。</li>
</ul>
<blockquote>
<p>A3： 具体办法我也没有尝试。按大致思路就是修改环境变量 path 。具体办法应该是把 git 下 <code>ssh</code> 放在 用户环境变量中 PATH 中 第一行。让其高于 ope<code>ssh</code>。默认优先级 同级目录前面高于后面，不同级目录中子目录高于父级。好像是。。可以试试吧，不行的话再同时配置一份 <code>vscode</code> ssh/config 文件。</p>
</blockquote>
<ul>
<li>Q4. 针对 <font color=red> 问题 2</font> 的解决办法 。csdn 上好多都把这个问题解决办法粘贴到 <font color=red> 问题 1</font>上。不知道咋想的。</li>
</ul>
<blockquote>
<p>具体参考 vscode 官网 。 远程开发插件 ssh 权限错误修复问题。<a href="https://code.visualstudio.com/docs/remote/troubleshooting#_fixing-ssh-file-permission-errors">_fixing-ssh-file-permission-errors</a></p>
</blockquote>
<h5 id="反正-win10-这个openssh-挺坑的。选择重装的话去-github-找找-openssh-然后安装后，记得配置环境变量"><a href="#反正-win10-这个openssh-挺坑的。选择重装的话去-github-找找-openssh-然后安装后，记得配置环境变量" class="headerlink" title="反正 win10 这个openssh 挺坑的。选择重装的话去 github 找找 openssh 然后安装后，记得配置环境变量"></a>反正 win10 这个<code>openssh</code> 挺坑的。选择重装的话去 github 找找 <code>openssh</code> 然后安装后，记得配置环境变量</h5><h5 id="个人肯定希望-vscode-和-cmd-powershell-都能使用-openssh-目前我的解决办法-即-A2-sss"><a href="#个人肯定希望-vscode-和-cmd-powershell-都能使用-openssh-目前我的解决办法-即-A2-sss" class="headerlink" title="个人肯定希望 vscode 和 cmd / powershell 都能使用 openssh 目前我的解决办法 即 A2 + sss"></a>个人肯定希望 vscode 和 cmd / powershell 都能使用 openssh 目前我的解决办法 即 A2 + sss</h5><ul>
<li>sss: 删掉 /user/.ssh/config 文件</li>
<li>/user/.ssh/config 粘贴到 c:programData/ssh/config</li>
<li>设置 vscode remote ssh: config file 为 c:programData/ssh/config 这样 vscode cmd 都能成功使用 openssh 工具。</li>
</ul>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-21-01</title>
    <url>/2021/01/09/bug/M01/</url>
    <content><![CDATA[<h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><ul>
<li><p>浏览器默认换行规则</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>结果</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>‘这是一段中文字符串’</td>
<td>换行</td>
<td>white-space: nowrap</td>
</tr>
<tr>
<td>‘abcdefghijklmn’</td>
<td>不换</td>
<td>–</td>
</tr>
<tr>
<td>‘1231231231313123’</td>
<td>不换</td>
<td>–</td>
</tr>
</tbody></table>
</li>
<li><p>http response 中 有关于 地址字符串的数据丢失(疑似后端问题)</p>
<table>
<thead>
<tr>
<th>后端返回</th>
<th>浏览器中 network response</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>‘<a href="https://sourcegraph.com/&#39;">https://sourcegraph.com/&#39;</a></td>
<td>‘S//sourcegraph.com/‘</td>
<td>..</td>
</tr>
</tbody></table>
</li>
<li><p>vue-router 3.1 当前页面跳转当前页面 ， 控制台报错，页面无法正常跳转</p>
<ul>
<li>vue-router 没有提供直接更改浏览器地址栏中参数的 api，导致跳转当前页面时，可以自己控制数据更新，但是地址栏内参数不变</li>
<li>this 指向问题 ，重写 router.push 方式 强制修改调用 this</li>
<li>跳转空页面，再跳回当前页面</li>
<li>google 了一下 说 vue-router 3.0 后解决了地址栏更新问题，但是会产生不会触发组件数据生命周期的问题， 但是 vue-router 3.1 失败了，未验证</li>
</ul>
</li>
<li><p>vue 组件接受到的 props 类似于 const 类型 ，但是如果是引用则可以修改其属性，并且会影响到父组件内</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">:info</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在son内部修改</span>
info<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>滚动条挤压页面内容影响布局</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 方案 1 */</span>
<span class="token selector">.div</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* overflow-y: overlay;  chrome兼容 */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 方法 2 */</span>
<span class="token selector">html</span> <span class="token punctuation">&#123;</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span> //这是为了兼容 <span class="token property">ie8，不支持</span><span class="token punctuation">:</span>root<span class="token punctuation">,</span> vw
<span class="token punctuation">&#125;</span>

<span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">:root body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 方法 3 */</span>
<span class="token selector">*</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">html</span> <span class="token punctuation">&#123;</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 100vw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #00b83f<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>vue watch / $watch 在监听引用类型时,回调函数中 newValue === oldValue</p>
</li>
<li><p>Array.prototype.every / Array.prototype.some 如果用一个空数组进行测试，在任何情况下它返回的都是 false。</p>
</li>
<li><p>[].push(1,2,3,3,4)</p>
</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li>项目内权限控制映射，统一管理</li>
<li>单个 template 尽量丰富内容， js control 驱动</li>
<li>单 vue 文件内部 静态表头 映射表 文案 权限 通用函数 ，就近 js 维护 ？</li>
</ul>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul>
<li>vue.js</li>
<li>vuex</li>
<li>vue-class-component</li>
<li>vue-property-decorator</li>
<li>vuex-class</li>
<li>core-decorators.js</li>
<li>Vue.compile( template )</li>
<li>vm.$mount( [elementOrSelector] )</li>
</ul>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>bug</tag>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-21-02</title>
    <url>/2021/02/06/bug/M02/</url>
    <content><![CDATA[<h3 id="js-装饰器语法"><a href="#js-装饰器语法" class="headerlink" title="js 装饰器语法"></a>js 装饰器语法</h3><blockquote>
<p>@babel/plugin-proposal-decorators</p>
</blockquote>
<ul>
<li><p>package.json</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/plugin-proposal-decorators<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>.babelrc</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">"@babel/plugin-proposal-decorators"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"legacy"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="jsDoc-注释"><a href="#jsDoc-注释" class="headerlink" title="jsDoc 注释"></a>jsDoc 注释</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Represents a book.
 * @constructor
 * @param &#123;string&#125; title - The title of the book.
 * @param &#123;string&#125; author - The author of the book.
 */</span>
<span class="token keyword">function</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/jsDoc.png" alt="jsDoc"></p>
<h3 id="滚动条穿透"><a href="#滚动条穿透" class="headerlink" title="滚动条穿透"></a>滚动条穿透</h3><p><img src="/images/body_scrol.png" alt="jsDoc"></p>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-21-05</title>
    <url>/2021/05/23/bug/M05/</url>
    <content><![CDATA[<h3 id="页面问题排查以及优化"><a href="#页面问题排查以及优化" class="headerlink" title="页面问题排查以及优化"></a>页面问题排查以及优化</h3><blockquote>
<p>记录一次老项目中 iview3.0 table 页面渲染缓慢的问题</p>
</blockquote>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote>
<p>目的时在列表加载前全局 loading 然后获取到数据后 关闭 loading<br>同时在 Tabel 组件中渲染列表数据</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 伪代码如下</span>
<span class="token keyword">async</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$loading<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span>  <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$loading<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>list  <span class="token operator">=</span>  list
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结果是<br>AJAX 实际花费 300ms<br>loading 状态持续约 3 秒以上<br>之后 table 才展示渲染完成，同时滚动页面十分卡顿</p>
</blockquote>
<h4 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h4><ul>
<li><p>this.$loading.close() 默认时长 ？ 无</p>
</li>
<li><p>ajax 接口太慢 ？ 300ms</p>
</li>
<li><p>vue-devtools performance 面板如下</p>
</li>
<li><p>页面几乎处于卡死状态，同时 vue 抛出了大量 input 事件和生命周期钩子<br><img src="/images/framesOfSecond.png" alt="帧率"></p>
</li>
<li><p>table-ceil 渲染时间过长，怀疑自定义列中生成了不必要的自定义内容<br><img src="/images/componentRender.png" alt="componentRender"></p>
</li>
<li><p>通过 chrome performance 面板分析 基本可以确认上述猜想<br><img src="/images/performanceOfChromeDevTools.png" alt="performanceOfChromeDevTools"></p>
</li>
<li><p>排查代码 呵呵</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  源代码其中一处的伪代码如下</span>
<span class="token comment">//  操作 根据 show 条件展示 tips</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span>row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'tip'</span><span class="token punctuation">,</span>
   row<span class="token punctuation">.</span>show <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
       <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">"hover"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">,</span>
   row<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ul>
<li>table-ceil 错误的 render 方式，重复渲染不必要的内容</li>
<li>大量的 create add dom 更新 js 引擎同步阻塞了 loading 状态的视图更新，所以 loading 时间很长</li>
<li>table 渲染后，错误的 mouseover 事件触发和监听，导致页面滑动卡顿</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>条件控制 table-ceil 中的渲染内容 ，修改事件处理方法</li>
<li>Object.freeze 冻结 list 数据，跳过内部元素依赖收集阶段</li>
<li>低版本 vue，旧的组件库，上古项目 ，尽早重构</li>
</ul>
<h3 id="内网-接口跨域问题"><a href="#内网-接口跨域问题" class="headerlink" title="内网 接口跨域问题"></a>内网 接口跨域问题</h3><blockquote>
<p>一个 cors 请求涉及跨域被 chrome 并警告禁止<br>自己 test 环境 本地环境 都存在这个问题<br>少数人的浏览器 test 环境必现</p>
</blockquote>
<h4 id="尝试的过程-都失败了"><a href="#尝试的过程-都失败了" class="headerlink" title="尝试的过程 都失败了"></a>尝试的过程 都失败了</h4><ul>
<li>接口访问权限 (不太可能)</li>
<li>关闭浏览器所有插件 (插件影响)</li>
<li>无痕浏览器 (插件影响，缓存)</li>
<li>关闭浏览器 HSTS/PKP (浏览器安全策略影响)</li>
<li>换个浏览器 firefox (浏览器头不通过)</li>
<li>换个局域网 ip (ip 白名单不通过)</li>
<li>关闭 vpn 代理 (ip 不通过)</li>
<li>大概折腾了半天，部分测试，产品都有这个问题</li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><ul>
<li>查了很久，看到有地方说可能是证书的问题，需要导出证书并重新导入</li>
<li>删除该域名下的相关证书</li>
</ul>
<blockquote>
<p>OK！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-21-08</title>
    <url>/2021/08/31/bug/M08/</url>
    <content><![CDATA[<h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><ul>
<li>js-sdk 中<code>WWopenData.prefetch</code>入参,浏览器环境支持<code>Number</code>，企业微信内置环境必须 <code>String</code></li>
<li>正常注册使用时，<code>error : WWopenData.prefetch is undefined</code> , 企业微信某次版本升级造成的， <code>v3.1.12.90282</code>之前不知道如何， <code>v3.1.12.90282</code> 有这个问题，<code>v3.1.12.90288</code>时已经修复。</li>
<li>vite 在多页应用模式下,dev-server 时，手动改变地址栏 url 到 app2 的路由， 只会被启动 dev 的 app1 应用(即根目录下的.html)内的 router 路由接管，如果需要跳转到 app2 时，开发模式下请使用<code>router-link</code> <code>&lt;a&gt;</code> 手动跳转</li>
</ul>
<h3 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h3><ul>
<li><p>code-server : 自定义部署 <code>webIDE</code></p>
</li>
<li><p>caddy : 简单配置自动升级<code>http2</code></p>
</li>
<li><p><code>proxyman</code> 比 <code>charles</code> 舒适</p>
</li>
<li><p><a href="https://work.weixin.qq.com/api/doc/90001/90148/90457#%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1Mac%E7%89%88%E6%9C%AC%E8%B0%83%E8%AF%95">企业微信 pc 打开调试模式</a>（一打断点就直接崩溃）</p>
</li>
<li><p>微信开发者工具，能很大程度覆盖企业微信的能力，但还是有环境差异，不能完全代理真实环境</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>C# frameWork 链接mysql 踩坑</title>
    <url>/2019/04/28/bug/c#bug/</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><blockquote>
<p>几天前刚接触这个用 VS 2017 用 C#的网站开发，需要用到 MYSQL。 连接<br>MYSQL 的过程中遇到了各种各样的问题，查了很多博客，大多数都是一 些 NC 压根<br>没自己实际使用而转载的。浪费了很多时间，最后整理如下：<br>原因具体不知道，下面的版本对应可以完成</p>
</blockquote>
<h4 id="需要的东西"><a href="#需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h4><ul>
<li><p>mysql 5.6.17</p>
</li>
<li><p>最新版 Visual Studio 2017 社区版</p>
</li>
<li><p>NuGet 包管理器</p>
</li>
<li><p>MySQL Connector/NET 6.8.8</p>
</li>
<li><p>mysql for vs 1.2.8</p>
</li>
<li><p>MySql.Data.Entity 6.8.8</p>
</li>
<li><p>MySql.Data 6.8.8</p>
</li>
<li><p>EntityFramework.zh-Hans 6.0</p>
</li>
<li><p>EntityFramework 6.0</p>
</li>
</ul>
<h4 id="我所遇到的问题"><a href="#我所遇到的问题" class="headerlink" title="我所遇到的问题"></a>我所遇到的问题</h4><ul>
<li>创建<strong>ADO .Net</strong>实体模型时没有<strong>MYSQL</strong>的选项 ；</li>
<li>进行<strong>MYSQL 的数据链接</strong>时用户权限不够，无法访问；</li>
<li>之后的 <strong>选择数据连接</strong> 发生闪退；</li>
<li><strong>X6 实体框架不兼容</strong></li>
<li><strong>数据源控件配置数据源</strong>时出现未实例化对象</li>
<li><strong>此版本的实体数据源向导不兼容</strong>导致无法后续操作；</li>
<li>……一堆问题有的都忘记了，大概就这些。</li>
</ul>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul>
<li><p><strong>MYSQL5.6.17</strong>这个应该没什么问题吧，略过</p>
</li>
<li><p><strong>最新版 Visual Studio 2017 社区版</strong> 和这个东西不知道有没有关系，前面没有更新，一直没有成功过。因为没有确定别的插件一一做测试，所以不知道是不是它的锅，原因不详。走头无路的话就更新试试吧。</p>
</li>
<li><p><strong>MySQL Connector/NET 6.8.8</strong>官网更新到后面了，但是版本高了就是不对，具体原因别问我，问就是不知道。有人说再上的版本行不行，不知道前面用了 6.9.xx。失败！</p>
</li>
<li><p><strong>mysql for vs 1.2.8</strong>是最新版的，好像没什么问题。2019/04/28</p>
</li>
<li><p><strong>MySql.Data.Entity 6.8.8</strong><br><strong>MySql.Data 6.8.8</strong><br><strong>EntityFramework.zh-Hans 6.0</strong><br><strong>EntityFramework 6.0</strong><br>这四个东西也很重要，可以解决上面 3.4.5.6 的问题，具体不知道。<strong>从 NuGet 安装这四个东西的时候，直接搜索 MySql.Data.Entity 安装 6.8.8 版本 它会自动安装其他附属包，最后 4 个都会完完整整安装好。别去听某些说的在哪啥控制台安装，改什么配置文件，引用啥啥 EF6.dll ！NMSL！</strong></p>
</li>
<li><p>全部过程就这样。其他的没怎么考虑，弄了几天终于成功创建并使用,真的激动惨了。</p>
</li>
</ul>
<h4 id="附上包和驱动的图片"><a href="#附上包和驱动的图片" class="headerlink" title="附上包和驱动的图片"></a>附上包和驱动的图片</h4><p><img src="https://img-blog.csdnimg.cn/20190428193237215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbnN0YXJz,size_16,color_FFFFFF,t_70" alt="注意版本和connertoe NET一致"><br><img src="https://img-blog.csdnimg.cn/20190428193300492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbnN0YXJz,size_16,color_FFFFFF,t_70" alt="这是两个连接驱动，注意版本号"></p>
<hr>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑系列</title>
    <url>/2019/11/27/bug/index/</url>
    <content><![CDATA[<h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul>
<li>  switch case 下没有独立作用域</li>
<li>  class 构造函数内不要<code>return</code> 一个引用类型，会覆盖<code>new</code>后的结果</li>
</ul>
<h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><ul>
<li>csv 导入云端数据库时 number 类型发生改变为 string, 字段类型不能控制<ul>
<li>  修改 csv 单元格内容类型</li>
</ul>
</li>
<li>csv 文件导入中文字符乱码<ul>
<li>  另存为 .txt</li>
<li>  修改文件字符编码格式 utf-8</li>
<li>  重命名后缀.csv</li>
</ul>
</li>
<li>  微信开发工具 input 框 ,字体大小会闪烁</li>
</ul>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul>
<li>  elementUI 拖拽组件在 mac safri 浏览器下完成拖拽后自动产生 hover 效果</li>
<li>  weex 下 <code>&lt;image&gt;</code>标签的缩放问题,查看属性</li>
</ul>
<h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h4><ul>
<li>  <code>git checkout . == rm -rf *</code></li>
<li>  <code>git submodule init</code></li>
<li>  <code>git submodule update</code></li>
<li>  git 设置 http/https 代理后,取消代理设置, git clone 任然走代理端口导致 clone 失败(未解决) – 卸载重装</li>
<li>git clone 时编码错误 (未解决)– 卸载重装<br>  <code>git clone failed Failed to convert “” to ACE; could not convert string to UTF-8</code></li>
</ul>
<h4 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h4><ul>
<li>  v-for 最好嵌套在父节点内部</li>
<li>  v-for 内 key 最好绑定唯一键值而不是 index ,vue 存在自己缓存的机制,数组改变后剩下元素的 index 不变时，默认未发生变化！</li>
<li>  <code>props</code>监听 使用 <code>computed</code> 属性转换监听对象</li>
<li>  dom 异步更新 <code>this.$nextTick(()=&gt;&#123;&#125;)</code></li>
</ul>
<h4 id="DEV"><a href="#DEV" class="headerlink" title="DEV"></a>DEV</h4><ul>
<li><p>安装依赖包死活出现问题：</p>
<ul>
<li>  检查 node 版本！</li>
<li>  检查全局包工具版本！</li>
</ul>
</li>
<li><p>出现本地和线上差异时：</p>
<ul>
<li>  检查线上 babel 和 loader 和本地是否对应！(<code>for... of...</code> )</li>
<li>  (class 作用域) 避免 css 选择器进行 dom 操作和进入逻辑结构</li>
</ul>
</li>
<li><p>  <code>&amp;&amp;</code> 后的代码报错问题 例 <code>A=FALSE ;</code> <code>A &amp;&amp; B</code> <code>B</code>处代码报错</p>
</li>
<li><p>  Es6 属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串 <code>[object Object]</code></p>
</li>
<li><p>[keyA] 和 [keyB] 得到的都是<code>[object Object]</code>，所以 [keyB] 会把 [keyA] 覆盖掉，而 obj 最后只有一个<br>  <code>[object Object]</code> 属性。</p>
</li>
</ul>
<h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><ul>
<li>  chrome 插件会影响浏览器的缓存策略(未排查)</li>
<li>  lightHouse viewer 需要梯子才能用</li>
</ul>
<h3 id="react-Native"><a href="#react-Native" class="headerlink" title="react Native"></a>react Native</h3><ul>
<li>  顶部导航文字居中问题</li>
<li>  fildlist 底部 margin 和 padding 挤压</li>
</ul>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-21-06</title>
    <url>/2021/07/01/bug/M06/</url>
    <content><![CDATA[<h3 id="6-月"><a href="#6-月" class="headerlink" title="6 月"></a>6 月</h3><ul>
<li><p>chrome HSTS 策略导致部分域名下的资源或者接口跨域 , 打开 <a href="chrome://net-internals/#hsts">chrome://net-internals/#hsts</a> 底部 delete 相关域名即可</p>
</li>
<li><p><code>vue</code>备注与学习相关已经移动到<code>vue_post</code>中,参考资料 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md">0040-script-setup.md</a></p>
</li>
<li><p>vue-next dev 默认不开启 sourcemap 启动时加上<code>--s</code> 或者 <code>--sourcemap</code>即可</p>
</li>
<li><p>String.prototype.match()</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;router>  group: "one" ; title : "list"    &lt;/router></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;router>(.+)&lt;\/router></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Array</span>
<span class="token comment">// 0: "&lt;router>  group: "one" ; title : "list"    &lt;/router>"</span>
<span class="token comment">// 1: " group: "one" ; title : "list" "</span>
<span class="token comment">// groups: undefined</span>
<span class="token comment">// index: 0</span>
<span class="token comment">// input: "&lt;router>  group: "one" ; title : "list"    &lt;/router>"</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"Nothing will come of nothing."</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns [""]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="webpack-plugin"><a href="#webpack-plugin" class="headerlink" title="webpack plugin"></a>webpack <a href="https://webpack.js.org/contribute/writing-a-plugin/">plugin</a></h3><ul>
<li><p>vite plugin 基于 rollup 工作流定制</p>
</li>
<li><p>plugin</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">myPugin</span> <span class="token punctuation">&#123;</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>Compiler Hooks</p>
</li>
<li><p>Compilation Hooks</p>
</li>
<li><p>轮子太多了 babel + chokidar + fs + ast &gt; ⚪</p>
</li>
<li><p>调试技巧见后</p>
</li>
</ul>
<h3 id="v8-https-github-com-v8-v8"><a href="#v8-https-github-com-v8-v8" class="headerlink" title="v8 https://github.com/v8/v8"></a>v8 <a href="https://github.com/v8/v8">https://github.com/v8/v8</a></h3><ul>
<li><p>快慢数组</p>
</li>
<li><p>hash 表</p>
</li>
<li><p>想到了之前看过一个问题 v8 <code>array.prototype.sort</code> 的排序原理 ， 查了一下 ，大多数回复就一个链接地址指向一个 n 年前的 v8 分支的 js 文件上 ， 撸代码发现 小于 10 就使用插入排序， 10 以上就快速排序</p>
</li>
<li><p>实际上 v8 早就更新为 <code>ArrayTimSort</code> 排序方法</p>
</li>
<li><p>third_party &gt; v8 &gt;builtins &gt; array-sort.tq ,一种语法类似 ts 的语言</p>
</li>
<li><pre><code class="ts">// TODO 整理解析
function ArrayTimSort(context: Context, sortState: SortState, length: Smi) &#123;
  if (length &lt; 2) return;
  let remaining: Smi = length;

  // March over the array once, left to right, finding natural runs,
  // and extending short natural runs to minrun elements.
  let low: Smi = 0;
  const minRunLength: Smi = ComputeMinRunLength(remaining);
  while (remaining != 0) &#123;
    let currentRunLength: Smi = CountAndMakeRun(low, low + remaining);

    // If the run is short, extend it to min(minRunLength, remaining).
    if (currentRunLength &lt; minRunLength) &#123;
      const forcedRunLength: Smi = SmiMin(minRunLength, remaining);
      BinaryInsertionSort(low, low + currentRunLength, low + forcedRunLength);
      currentRunLength = forcedRunLength;
    &#125;

    // Push run onto pending-runs stack, and maybe merge.
    PushRun(sortState, low, currentRunLength);

    MergeCollapse(context, sortState);

    // Advance to find next run.
    low = low + currentRunLength;
    remaining = remaining - currentRunLength;
  &#125;

  MergeForceCollapse(context, sortState);
  assert(GetPendingRunsSize(sortState) == 1);
  assert(GetPendingRunLength(sortState.pendingRuns, 0) == length);
&#125;
</code></pre>
</li>
</ul>
<h3 id="调试-node-程序"><a href="#调试-node-程序" class="headerlink" title="调试 node 程序"></a>调试 node 程序</h3><ul>
<li><code>vscode</code> 断点调试 node 程序 ，比如开发 webpack vite 插件 ， electron 桌面应用 ，egg web 应用等</li>
<li>进程守护工具 <code>pm2</code> 或者 modemon // 终端日志输出</li>
<li><code>pm2</code>-dev 启动 // <code>pm2</code> 终端日志输出</li>
<li>egg-dev // egg 终端日志输出</li>
<li><code>vscode</code> 断点</li>
<li><code>pm2</code> start <code>--inspect</code> 启动， 然后 <code>vscode</code> 使用 debug attach 自动附加到带<code>--inspect</code> 标识的进程， 即可使用 <code>vscode</code> 断点调试功能，修改代码后， <code>pm2</code> 会自动重启应用，debug 也会自动重新附加到目标程序。</li>
<li>…</li>
</ul>
<h3 id="win11-开发预览版体验"><a href="#win11-开发预览版体验" class="headerlink" title="win11 开发预览版体验"></a>win11 开发预览版体验</h3><ul>
<li>设置中加入预览体验计划</li>
<li>设置中打开相关推送 -收到受到 win11 升级推送</li>
<li>选择 dev 版本 -升级安装即可</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>6 月事情有点多 不太顺心</li>
</ul>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>Record-20-11</title>
    <url>/2020/12/06/bug/M11/</url>
    <content><![CDATA[<h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><ul>
<li>抽屉,弹窗组件 关闭时并没有真正销毁,导致子组件仍然维持着自己的状态 ( key )</li>
<li>http 网络请求中,long 在 response 中完整,代码和 preview 中 类型的精度丢失 ( 使用字符串 )</li>
<li>http 400 500 可能是参数缺失,或者参数类型错误</li>
<li>babel7 Vue-Loader 14.2 中使用 Async await 时, 使用 this,在 debugger 断电调试时,获取不到 this 对象 , 但是 console.log() 运行时可以获取</li>
<li>docker nginx 请求转发。 1.采用 docker network 构建网桥 2.192.XXX.XXX.XXX 局域网地址</li>
<li>parsInt 小数点后精度丢失</li>
<li>v2rayu 全局模式时，系统网络服务冲突，导致 webpack dev 访问错误</li>
<li>vue.$option.name 和 template_tag</li>
</ul>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul>
<li><p>babel 7</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"@babel/cli"</span><span class="token operator">:</span> <span class="token string">"^7.6.4"</span><span class="token punctuation">,</span>
<span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.12.9"</span><span class="token punctuation">,</span>
<span class="token property">"@babel/plugin-syntax-jsx"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.12.7"</span><span class="token punctuation">,</span>
<span class="token property">"@babel/register"</span><span class="token operator">:</span> <span class="token string">"^7.6.2"</span><span class="token punctuation">,</span>
<span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.0.6"</span><span class="token punctuation">,</span>
<span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.8.0"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>webpack plugin</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">
<span class="token comment">//   ??</span>
<span class="token property">"@babel/plugin-proposal-nullish-coalescing-operator"</span><span class="token operator">:</span> <span class="token string">"^7.12.1"</span><span class="token punctuation">,</span>
<span class="token comment">//   ?.</span>
<span class="token property">"@babel/plugin-proposal-optional-chaining"</span><span class="token operator">:</span> <span class="token string">"^7.12.7"</span><span class="token punctuation">,</span>

<span class="token comment">// for VUE</span>
<span class="token property">"babel-helper-vue-jsx-merge-props"</span><span class="token operator">:</span> <span class="token string">"^2.0.3"</span><span class="token punctuation">,</span>
<span class="token property">"babel-plugin-transform-vue-jsx"</span><span class="token operator">:</span> <span class="token string">"^3.7.0"</span><span class="token punctuation">,</span>
<span class="token property">"babel-plugin-syntax-jsx"</span><span class="token operator">:</span> <span class="token string">"^6.18.0"</span><span class="token punctuation">,</span>

<span class="token comment">//  加快打包速度</span>
<span class="token property">"hard-source-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^0.13.1"</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Record</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>bug</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>VEU Vnode and Diff</title>
    <url>/2021/02/05/vue/Vnode&amp;diff/</url>
    <content><![CDATA[<h2 id="updateChildren-amp-amp-patchVnode"><a href="#updateChildren-amp-amp-patchVnode" class="headerlink" title="updateChildren &amp;&amp; patchVnode"></a>updateChildren &amp;&amp; patchVnode</h2><ul>
<li><img src="/images/updatechildren.png" alt="updateChildren"></li>
<li><img src="/images/patchVnode.png" alt="patchVnode"></li>
</ul>
<h2 id="data-gt-view"><a href="#data-gt-view" class="headerlink" title="data-&gt; view"></a>data-&gt; view</h2><ul>
<li>createElm</li>
<li>removeVnodes</li>
<li>addVnodes</li>
<li>setTextContent</li>
</ul>
<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB

id1[&quot;_update&quot;] --&gt; print2[&quot;__patch&quot;]
print2 --&gt; print3[&quot;patch&quot;]
print3 --&gt; print4[&quot;patchVnode&quot;]
print4 --&gt; print5[&quot;updateChildren&quot;]

print4 --&gt; view2(&quot;patchRealDom&quot;)
view2 --&gt; print4


print5 --&gt;view(&quot;patchRealDom&quot;)
view --&gt; print5
print5 --&gt; print3[&quot;patch&quot;]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Vnode"><a href="#Vnode" class="headerlink" title="Vnode"></a>Vnode</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">elm</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">ns</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// rendered in this component's scope</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">componentOptions</span><span class="token operator">:</span> VNodeComponentOptions <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">componentInstance</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// component instance</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// component placeholder node</span>

  <span class="token comment">// strictly internal</span>
  <span class="token literal-property property">raw</span><span class="token operator">:</span> boolean <span class="token comment">// contains raw HTML? (server only)</span>
  <span class="token literal-property property">isStatic</span><span class="token operator">:</span> boolean <span class="token comment">// hoisted static node</span>
  <span class="token literal-property property">isRootInsert</span><span class="token operator">:</span> boolean <span class="token comment">// necessary for enter transition check</span>
  <span class="token literal-property property">isComment</span><span class="token operator">:</span> boolean <span class="token comment">// empty comment placeholder?</span>
  <span class="token literal-property property">isCloned</span><span class="token operator">:</span> boolean <span class="token comment">// is a cloned node?</span>
  <span class="token literal-property property">isOnce</span><span class="token operator">:</span> boolean <span class="token comment">// is a v-once node?</span>
  <span class="token literal-property property">asyncFactory</span><span class="token operator">:</span> Function <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// async component factory function</span>
  <span class="token literal-property property">asyncMeta</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">isAsyncPlaceholder</span><span class="token operator">:</span> boolean
  <span class="token literal-property property">ssrContext</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token literal-property property">fnContext</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// real context vm for functional nodes</span>
  <span class="token literal-property property">fnOptions</span><span class="token operator">:</span> <span class="token operator">?</span>ComponentOptions <span class="token comment">// for SSR caching</span>
  <span class="token literal-property property">devtoolsMeta</span><span class="token operator">:</span> <span class="token operator">?</span>Object <span class="token comment">// used to store functional render context for devtools</span>
  <span class="token literal-property property">fnScopeId</span><span class="token operator">:</span> <span class="token operator">?</span>string <span class="token comment">// functional scope id support</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter">tag<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    data<span class="token operator">?</span><span class="token operator">:</span> VNodeData<span class="token punctuation">,</span>
    children<span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">,</span>
    text<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
    elm<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">,</span>
    context<span class="token operator">?</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
    componentOptions<span class="token operator">?</span><span class="token operator">:</span> VNodeComponentOptions<span class="token punctuation">,</span>
    asyncFactory<span class="token operator">?</span><span class="token operator">:</span> Function</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data
    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children
    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text
    <span class="token keyword">this</span><span class="token punctuation">.</span>elm <span class="token operator">=</span> elm
    <span class="token keyword">this</span><span class="token punctuation">.</span>ns <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context
    <span class="token keyword">this</span><span class="token punctuation">.</span>fnContext <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fnOptions <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fnScopeId <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>key
    <span class="token keyword">this</span><span class="token punctuation">.</span>componentOptions <span class="token operator">=</span> componentOptions
    <span class="token keyword">this</span><span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isStatic <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isRootInsert <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isComment <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isCloned <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isOnce <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>asyncFactory <span class="token operator">=</span> asyncFactory
    <span class="token keyword">this</span><span class="token punctuation">.</span>asyncMeta <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// DEPRECATED: alias for componentInstance for backwards compat.</span>
  <span class="token comment">/* istanbul ignore next */</span>
  <span class="token keyword">get</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentInstance
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h3><pre class="mermaid"> graph TB
1((1)) --> 2((2))
1((1)) --> 3((3))
2 --> 4((4))
2 --> 11((11))
2 --> 5((5))

3 --> 6((6))
3 --> 7((7))

4 --> 8((8))
7 --> 9((9))
7 --> 10((10))</pre>

<ul>
<li><p>DFS 深度优先遍历(Depth First Search)</p>
<blockquote>
<p>栈<br>1 2 4 8 11 5 3 6 7 9 10</p>
</blockquote>
</li>
<li><p>BFS 广度优先遍历(Breath First Search)</p>
<blockquote>
<p>队列<br>1 2 3 4 11 5 6 7 8 9 10</p>
</blockquote>
</li>
<li><p>二叉樹</p>
<ul>
<li>先序</li>
<li>中序</li>
<li>后序</li>
</ul>
</li>
</ul>
<h3 id="patch"><a href="#patch" class="headerlink" title="patch()"></a>patch()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/*vnode不存在则直接调用销毁钩子*/</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> isInitialPatch <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// root</span>
    <span class="token comment">// empty mount (likely as component), create new root element</span>
    isInitialPatch <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/*标记旧的VNode是否有nodeType*/</span>
    <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRealElement <span class="token operator">&amp;&amp;</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// patch existing root node</span>
      <span class="token comment">// 是同一个节点  深入比较替换</span>
      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// mounting to a real element</span>
        <span class="token comment">// check if this is server-rendered content and if we can perform</span>
        <span class="token comment">// a successful hydration.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token constant">SSR_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          oldVnode<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token constant">SSR_ATTR</span><span class="token punctuation">)</span>
          hydrating <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>hydrating<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">invokeInsertHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> oldVnode
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">warn</span><span class="token punctuation">(</span>
              <span class="token string">'The client-side rendered virtual DOM tree is not matching '</span> <span class="token operator">+</span>
                <span class="token string">'server-rendered content. This is likely caused by incorrect '</span> <span class="token operator">+</span>
                <span class="token string">'HTML markup, for example nesting block-level elements inside '</span> <span class="token operator">+</span>
                <span class="token string">'&lt;p>, or missing &lt;tbody>. Bailing hydration and performing '</span> <span class="token operator">+</span>
                <span class="token string">'full client-side render.'</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// either not server-rendered, or hydration failed.</span>
        <span class="token comment">// create an empty node and replace it</span>
        <span class="token comment">// 合并到真实DOM失败，则创建一个空的VNode节点替换它</span>
        oldVnode <span class="token operator">=</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>

      <span class="token comment">// replacing existing element</span>
      <span class="token comment">// 真实目标dom</span>
      <span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm
      <span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>

      <span class="token comment">// create new node</span>
      <span class="token function">createElm</span><span class="token punctuation">(</span>
        vnode<span class="token punctuation">,</span>
        insertedVnodeQueue<span class="token punctuation">,</span>
        <span class="token comment">// extremely rare edge case: do not insert if old element is in a</span>
        <span class="token comment">// leaving transition. Only happens when combining transition +</span>
        <span class="token comment">// keep-alive + HOCs. (#4590)</span>
        oldElm<span class="token punctuation">.</span>_leaveCb <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> parentElm<span class="token punctuation">,</span>
        nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>

      <span class="token comment">// update parent placeholder node element, recursively</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> ancestor <span class="token operator">=</span> vnode<span class="token punctuation">.</span>parent
        <span class="token keyword">const</span> patchable <span class="token operator">=</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span>
          ancestor<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm
          <span class="token keyword">if</span> <span class="token punctuation">(</span>patchable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> ancestor<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// #6513</span>
            <span class="token comment">// invoke insert hooks that may have been merged by create hooks.</span>
            <span class="token comment">// e.g. for directives that uses the "inserted" hook.</span>
            <span class="token keyword">const</span> insert <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span>insert
            <span class="token keyword">if</span> <span class="token punctuation">(</span>insert<span class="token punctuation">.</span>merged<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// start at index 1 to avoid re-invoking component mounted hook</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insert<span class="token punctuation">.</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                insert<span class="token punctuation">.</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">registerRef</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span>
          ancestor <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>parent
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token comment">// destroy old node</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">invokeInsertHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> isInitialPatch<span class="token punctuation">)</span>
  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode()"></a>patchVnode()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> ownerArray<span class="token punctuation">,</span> index<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//  Same memory address</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// clone reused vnode</span>
    vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> elm <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      vnode<span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// reuse element for static trees.</span>
  <span class="token comment">// note we only do this if the vnode is cloned -</span>
  <span class="token comment">// if the new node is not cloned it means the render functions have been</span>
  <span class="token comment">// reset by the hot-reload-api and we need to do a proper re-render.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> i
  <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children
  <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// no text</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// both has children    dps   || true  &amp;&amp; true</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// node has child</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// if old has text  ,we set it as ''</span>
      <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span> <span class="token comment">// add Vnode children node</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//oldVnode  has children and delete it</span>
      <span class="token function">removeVnodes</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// TODO 566</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Replace content</span>
    nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="sameVnode"><a href="#sameVnode" class="headerlink" title="sameVnode()"></a>sameVnode()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">//是否异步的预赋值</span>
        a<span class="token punctuation">.</span>asyncFactory <span class="token operator">===</span> b<span class="token punctuation">.</span>asyncFactory <span class="token operator">&amp;&amp;</span> <span class="token comment">// 异步组件的工厂方法</span>
        <span class="token function">isUndef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h3><blockquote>
<p>双端比较算法，两个 Vnode 数组<br>找出差异的同时，完成需要修改的 dom 视图操作</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span>
  <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span>
  <span class="token keyword">let</span> oldKeyToIdx<span class="token punctuation">,</span> idxInOld<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">,</span> refElm

  <span class="token comment">// removeOnly is a special flag used only by &lt;transition-group></span>
  <span class="token comment">// to ensure removed elements stay in correct relative positions</span>
  <span class="token comment">// during leaving transitions</span>
  <span class="token keyword">const</span> canMove <span class="token operator">=</span> <span class="token operator">!</span>removeOnly

  <span class="token comment">// debugger</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>newCh<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span> <span class="token comment">// Vnode has been moved left</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>
      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>
      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">)</span>
      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>
      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Vnode moved right SO real dom move right</span>
      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">)</span>
      canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// move real dom</span>
      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>
      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Vnode moved left</span>
      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>
      canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token comment">// move real dom</span>
      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>
      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// [1,2,3]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span> <span class="token comment">//    old    &#123;  1: 0  ,  2:1  , 3:2&#125;</span>

      idxInOld <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>idxInOld<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// New element</span>
        <span class="token comment">//  [2]</span>
        <span class="token comment">//  [3]</span>
        <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// different index</span>
        <span class="token comment">//  [5,2,3,6],</span>
        <span class="token comment">//  [4,3,2,1]</span>
        vnodeToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">patchVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>
          oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
          canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// same key but different element. treat as new element</span>
          <span class="token comment">//   old  li  key =3</span>
          <span class="token comment">//   now   div key = 3</span>
          <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">></span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//  [1，2]</span>
    <span class="token comment">//  [4,2,1,3]</span>
    refElm <span class="token operator">=</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm
    <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span> <span class="token comment">// dom</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">></span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">removeVnodes</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span> <span class="token comment">// remove real dom</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="exapmple"><a href="#exapmple" class="headerlink" title="exapmple"></a>exapmple</h2><h3 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h3><pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;old]
 C((1))
 d((&#39;&#39;))
 f((&#39;&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;new]
 C((1))
 d((&#39;&#39;))
 g((&#39;&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h3><pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">
graph TB
 E&gt;old]
 C((&#39;&#39;))
 f((&#39;&#39;))
 e((2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;new]
 C((&#39;&#39;))
 d((&#39;&#39;))
 g((2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="example3"><a href="#example3" class="headerlink" title="example3"></a>example3</h3><pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;old]
 C((1))
 f((&#39;&#39;))
 e((&#39;&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;new]
 C((&#39;&#39;))
 d((&#39;&#39;))
 g((1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="example4"><a href="#example4" class="headerlink" title="example4"></a>example4</h3><pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;old]
 C((&#39;&#39;))
 d((&#39;&#39;))
 e((1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;new]
 C((1))
 d((&#39;&#39;))
 g((&#39;&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="example5"><a href="#example5" class="headerlink" title="example5"></a>example5</h3><pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;old]
 e((1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-Mermaid" data-language="Mermaid"><code class="language-Mermaid">graph TB
 E&gt;new]
 C((2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>比较前</li>
</ul>
<p><img src="/images/pre_patch.png" alt="docker操作导向"></p>
<ul>
<li><p>patch 之后</p>
</li>
<li><p><img src="/images/patch.png" alt="docker操作导向"></p>
</li>
</ul>
<h2 id="dom-操作"><a href="#dom-操作" class="headerlink" title="dom 操作"></a>dom 操作</h2><h3 id="addVnodes"><a href="#addVnodes" class="headerlink" title="addVnodes"></a>addVnodes</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addVnodes</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">createElm</span><span class="token punctuation">(</span>vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="createElm"><a href="#createElm" class="headerlink" title="createElm"></a>createElm</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> nested<span class="token punctuation">,</span> ownerArray<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// This vnode was used in a previous render!</span>
    <span class="token comment">// now it's used as a new node, overwriting its elm would cause</span>
    <span class="token comment">// potential patch errors down the road when it's used as an insertion</span>
    <span class="token comment">// reference node. Instead, we clone the node on-demand before creating</span>
    <span class="token comment">// associated DOM element for it.</span>
    vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  vnode<span class="token punctuation">.</span>isRootInsert <span class="token operator">=</span> <span class="token operator">!</span>nested <span class="token comment">// for transition enter check</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data
  <span class="token keyword">const</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children
  <span class="token keyword">const</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        creatingElmInVPre<span class="token operator">++</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUnknownElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> creatingElmInVPre<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token string">'Unknown custom element: &lt;'</span> <span class="token operator">+</span>
            tag <span class="token operator">+</span>
            <span class="token string">'> - did you '</span> <span class="token operator">+</span>
            <span class="token string">'register the component correctly? For recursive components, '</span> <span class="token operator">+</span>
            <span class="token string">'make sure to provide the "name" option.'</span><span class="token punctuation">,</span>
          vnode<span class="token punctuation">.</span>context
        <span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>ns <span class="token operator">?</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>ns<span class="token punctuation">,</span> tag<span class="token punctuation">)</span> <span class="token operator">:</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token function">setScope</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>

    <span class="token comment">/* istanbul ignore if */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__WEEX__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// in Weex, the default insertion order is parent-first.</span>
      <span class="token comment">// List items can be optimized to use children-first insertion</span>
      <span class="token comment">// with append="tree".</span>
      <span class="token keyword">const</span> appendAsTree <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appendAsTree<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appendAsTree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>appendAsTree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      creatingElmInVPre<span class="token operator">--</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="removeVnodes"><a href="#removeVnodes" class="headerlink" title="removeVnodes"></a>removeVnodes</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token parameter">vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> ch <span class="token operator">=</span> vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">removeAndInvokeRemoveHook</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
        <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Text node</span>
        <span class="token function">removeNode</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="domApi"><a href="#domApi" class="headerlink" title="domApi"></a>domApi</h3><ul>
<li><img src="/images/dom.png" alt="docker操作导向"></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE相关</title>
    <url>/2020/04/10/vue/vue/</url>
    <content><![CDATA[<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul>
<li>数据劫持</li>
<li>发布 订阅</li>
<li>监听器 Observe ：劫持 并监听所有属性，如果有变动的，就通知订阅者</li>
<li>消息订阅器 Dep ：收集订阅者，链接 监听器 Observer 和订阅者 Watcher</li>
<li>解析器 Compile: 扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器</li>
<li>订阅者 Watcher : 收到属性的变化通知并执行相应的函数，从而更新视图</li>
</ul>
<h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><ul>
<li>v-bind / prop</li>
<li>eventBus Vue.prototype.bus = new Vue() / this.bus.$on | this.bus.$emit</li>
<li>provide / inject</li>
<li>this.$refs.child / this.$parent</li>
<li>vuex</li>
<li>localstroage</li>
<li>vm.$attrs 和 vm.$listeners</li>
</ul>
<h4 id="vue-笔记"><a href="#vue-笔记" class="headerlink" title="vue 笔记"></a>vue 笔记</h4><ul>
<li>监听器 Observe<ul>
<li>抽象一个 <code>defineReactive</code> 劫持数据方法 <code>Object.defineProperty</code>，启动同时初始化一个订阅者容器 dep ， 储存对应的订阅者 watcher</li>
<li><code>defineReactive</code> 中递归遍历子节点，对所有节点进行 Observe()监听操作</li>
</ul>
</li>
<li>工具函数 判断对象类型 <code>object.prototype.toString.call(obj).slice(8,-1)</code></li>
<li>创建一个不在原型链上的空对象<code> Object.create(null)</code></li>
<li>对象 <code>getter</code> 代理</li>
</ul>
<h5 id="响应式数据注意点"><a href="#响应式数据注意点" class="headerlink" title="响应式数据注意点"></a>响应式数据注意点</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// [pop,push,shift,unshift,splice,reduce,reverse]</span>

<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span> <span class="token comment">// 不是响应性的</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 不是响应性的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一类<br><code>Vue.set(vm.items, indexOfItem, newValue)</code><br><code>vm.items.splice(indexOfItem, 1, newValue)</code></p>
<p>第二类<br><code>vm.items.splice(newLength)</code></p>
<h4 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h4><blockquote>
<p>在 vue 源码中 core/observe/index.js 中进行了 data 的数据劫持和观察操作，其中 observe 源码如下:</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">asRootData</span><span class="token operator">:</span> <span class="token operator">?</span>boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Observer <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">ob</span><span class="token operator">:</span> Observer <span class="token operator">|</span> <span class="token keyword">void</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ob <span class="token operator">=</span> value<span class="token punctuation">.</span>__ob__
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldObserve <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>value<span class="token punctuation">.</span>_isVue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>asRootData <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ob<span class="token punctuation">.</span>vmCount<span class="token operator">++</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> ob
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们注意到 <code> Object.isExtensible(value)</code>这个操作,如果为 false ，直接 return ob 不对该对象进行观察。<br>MDN 解释道<br>Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新对象默认是可扩展的.</span>
<span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span> <span class="token comment">// === true</span>

<span class="token comment">// ...可以变的不可扩展.</span>
Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span> <span class="token comment">// === false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>同时还有几个其他的 Object 静态方法</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，</span>
<span class="token comment">// 不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。</span>
<span class="token comment">// 此外，冻结一个对象后该对象的原型也不能被修改。</span>
<span class="token comment">// freeze() 返回和传入的参数相同的对象。</span>
<span class="token comment">// 浅冻结  即 内部的引用类型的值任然可以修改，操作</span>
Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// 判断一个对象是否被冻结。</span>

Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</span>

Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 判断一个对象是否被密封。</span>

Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 让一个对象变的不可扩展，也就是永远不能再添加新的属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>TIP<br><span style="color:red"><br>所以 ，在 vue data 返回的属性中，进行 <code>freeze</code> <code>seal</code> <code>preventExtensions</code> 操作的数据会跳过 <code>Observer</code> 阶段，从而避免了数据的深层递归观察。所以对 vm 中某些不需要响应式变化的固定值，采用上面的方式冻结对象，优化速度 vue initData 的速度，同时节约内存消耗。<br>eg:</p>
</blockquote>
<ul>
<li>table 表头</li>
<li>固定的下拉框枚举(最好采用字典，动态获取)</li>
<li>确定不会改变的文案</li>
<li>一些静态数据</li>
<li>表单的校验条件</li>
<li>全局自定义挂在的方法</li>
<li>…</li>
</ul>
</span>
### router

<ul>
<li>原理 : 通过这两种方式改变地址栏不会发送请求</li>
<li>#hash<ul>
<li>通过 window.hashchange 事件监听</li>
</ul>
</li>
<li>history<ul>
<li>pushState()</li>
<li>replaceState(name,title,’’)<br>window.popstate 事件监听</li>
</ul>
</li>
</ul>
<h3 id="渲染过程"><a href="#渲染过程" class="headerlink" title="渲染过程"></a>渲染过程</h3><ol>
<li>把模板编译为 render 函数</li>
<li>实例进行挂载, 根据根节点 render 函数的调用，递归的生成虚拟 dom</li>
<li>对比虚拟 dom，渲染到真实 dom</li>
<li>组件内部 data 发生变化，组件和子组件引用 data 作为 props 重新调用 render 函数，生成虚拟 dom, 返回到步骤 3</li>
</ol>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul>
<li><p>自定义 dispath 方法向上传值 适用于表单校验</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'formItem'</span><span class="token punctuation">,</span> <span class="token string">'on-form-change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>父组件传递动态参数给动态组件<br>⚠️</p>
<blockquote>
<p>此时代码在.js 文件内<br>项目内需要配合 babel 使用 jsx 语法<br>如果写在。vue 文件中，必须去掉 template 标签</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 functional 组件</span>
<span class="token comment">//  render 函数动态渲染</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">functional</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// TODO  待深入</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// h 必须存在 指定作用域 同时生成vnode: h（‘div’,obj,[arg]）</span>
    <span class="token comment">// context 上下文对象</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> out<span class="token punctuation">,</span> config <span class="token punctuation">&#125;</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>props<span class="token punctuation">.</span>model
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>config <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mytest"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span>label<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span>yu<span class="token operator">-</span>select <span class="token punctuation">&#123;</span><span class="token operator">...</span>data<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yu<span class="token operator">-</span>select<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>监听</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'hook:updated'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">'hook:updated'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> someObj<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取消监听</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>自定义组件 v-model</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 自上而下传入的志</span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 抛出的事件</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>利用函数实现过滤器效果(vue3 过滤器废除)</p>
</li>
<li><p>作用域插槽</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 子组件 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:obj</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- 父组件 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#key1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;item&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>vuex 自定义 state 类，实现数据的同步，异步，集中管理</p>
</li>
<li><p>组件的 key 值改变，会保证组件的渲染和数据更新，而不仅是内容和属性改变 （patch 算法）（重新进行生命周期）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3</title>
    <url>/2020/09/17/vue/vue3/</url>
    <content><![CDATA[<h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><h4 id="常用的-Composition-API"><a href="#常用的-Composition-API" class="headerlink" title="常用的 Composition API"></a>常用的 Composition API</h4><ul>
<li>getCurrentInstance</li>
<li>defineComponent</li>
<li>defineAsyncComponent</li>
<li>setup</li>
<li>ref</li>
<li>reactive</li>
<li>watchEffect</li>
<li>toRef</li>
<li>toRefs</li>
<li>provide</li>
<li>inject</li>
<li>readOnly</li>
<li>renderList</li>
<li>nextTick</li>
</ul>
<h4 id="script-setup-Api"><a href="#script-setup-Api" class="headerlink" title="script setup Api"></a>script setup Api</h4><ul>
<li>defineProps</li>
<li>defineEmit</li>
<li>renderSlots</li>
<li>useContext</li>
<li>h</li>
</ul>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// setup Component</span>
<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 合并data</span>
    <span class="token comment">// return ()=>&#123;&#125;   render</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- script setup   --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// props.title</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> slots<span class="token punctuation">,</span> attrs <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取 emit</span>
  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'chang-name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 调用 emit</span>
  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'chang-name'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h3><h4 id="Fragment-片断"><a href="#Fragment-片断" class="headerlink" title="Fragment(片断)"></a>Fragment(片断)</h4><h4 id="Teleport-瞬移"><a href="#Teleport-瞬移" class="headerlink" title="Teleport(瞬移)"></a>Teleport(瞬移)</h4><h4 id="Suspense-不确定的"><a href="#Suspense-不确定的" class="headerlink" title="Suspense(不确定的)"></a>Suspense(不确定的)</h4>]]></content>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>算法可视化</title>
    <url>/2020/08/18/tools/al/</url>
    <content><![CDATA[<p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">算法可视化</a></p>
]]></content>
  </entry>
  <entry>
    <title>Caddy</title>
    <url>/2021/12/31/tools/caddy/</url>
    <content><![CDATA[<h3 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a>Caddy</h3><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><h3 id="DO"><a href="#DO" class="headerlink" title="DO"></a>DO</h3>]]></content>
      <tags>
        <tag>network server</tag>
      </tags>
  </entry>
  <entry>
    <title>企业微信三方应用开发与调试</title>
    <url>/2021/08/22/tools/code-server/</url>
    <content><![CDATA[<h3 id="企业微信三方应用-通讯录组件的开发和调试"><a href="#企业微信三方应用-通讯录组件的开发和调试" class="headerlink" title="企业微信三方应用-通讯录组件的开发和调试"></a>企业微信三方应用-通讯录组件的开发和调试</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote>
<p>因为企业微信限制，在第三方应用中无法直接获通讯录明文，只能通过企业微信提供的通讯录组件才能展示通讯录信息，但是通讯录组件存在几个使用条件</p>
</blockquote>
<table>
<thead>
<tr>
<th>通讯录提供的 api</th>
<th>条件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;ww-oepn-data&gt;</code></td>
<td>可信域名</td>
<td>dom 元素展示静态的信息</td>
</tr>
<tr>
<td><code>WWopenData.prefetch</code></td>
<td>可信域名 + https</td>
<td>根据 id 获取加密信息 ，用于 cavas 渲染</td>
</tr>
</tbody></table>
<ul>
<li>企业微信后台能验证通过的可信域名 , 即一个 txt 文件必须在网站的根目录，并且能被访问</li>
<li>域名必须经过备案</li>
<li>wx.config 的<code>ready</code>时间后进行 <code> wx.agentConfig</code> ，同时<code>wx.agentConfig的success</code>事件后才会挂载 <code>WWopenData</code></li>
<li>WWopenData.prefetch 必须在 https 的协议下才能工作，否则报错 ‘xxx is undefined’</li>
</ul>
<h4 id="通讯录组使用流程"><a href="#通讯录组使用流程" class="headerlink" title="通讯录组使用流程"></a>通讯录组使用流程</h4><ul>
<li><p>html 文件中在线链接引入 js-sdk ，wx-sdk</p>
</li>
<li><p>在需要使用 通讯录组件的页面 注册 <code>wx.config</code> 和<code>wx.agentConfig</code> (看文档)，如果是 spa，需要路由改变时再次进行注册(ios)</p>
</li>
<li><p>id 改变后重新执行 <code>WWopenData.bind</code></p>
</li>
</ul>
<h4 id="常规开发过程"><a href="#常规开发过程" class="headerlink" title="常规开发过程"></a>常规开发过程</h4><ul>
<li><code>wx.config</code> 先于 <code>wx.agentConfig</code></li>
<li>WWopenData 挂载时机</li>
<li><code>WWopenData.bind</code>的时机</li>
<li><code>WWopenData.prefetch</code> 参数类型</li>
<li>环境差异兼容</li>
</ul>
<p><strong>种种问题只能打包测试环境之后才能暴露出来，真机上难以调试，造成了修改-打包-发布-debug-修改的死循环</strong></p>
<hr>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul>
<li>即时编辑代码 + 代码热更新</li>
<li>https 服务应用</li>
<li>根目录.txt 校验文件检测</li>
<li>备案域名</li>
</ul>
<h4 id="js-sdk-的本地使用方案"><a href="#js-sdk-的本地使用方案" class="headerlink" title="js-sdk 的本地使用方案"></a>js-sdk 的本地使用方案</h4><blockquote>
<p>js-sdk 一般来说需要 wx.config 给对应的 api 授权<br>可能会需要在一个可信域名下进行 <code>wx.config</code>或者 <code>wx.agentConfig</code><br>那么怎么快速简单的在本地的开发服务进行域名 refer 验证呢？</p>
</blockquote>
<h4 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h4><ul>
<li>内网穿透本地服务</li>
<li>本地 host 域名劫持</li>
</ul>
<h5 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h5><blockquote>
<p>提供公网访问本地服务的能力</p>
</blockquote>
<ul>
<li>花生壳</li>
<li>frp</li>
<li>哲西云</li>
<li>…</li>
</ul>
<h5 id="本地-host-域名劫持"><a href="#本地-host-域名劫持" class="headerlink" title="本地 host 域名劫持"></a>本地 host 域名劫持</h5><ul>
<li>修改主机的 hosts 文件，将可信域名 dns 到本地 , 修改记录<code> 127.0.0.1 www.test.com</code>，这样主机访问<code>www.test.com</code>时就会访问本地的 localhos:80 服务</li>
<li>使用 nginx 或者 caddy 反向代理工具，将本地 80 端口的请求转发到项目的开发服务器上</li>
<li>浏览器 <code>www.test.com</code>访问项目</li>
</ul>
<h4 id="code-server-方案-环境配置"><a href="#code-server-方案-环境配置" class="headerlink" title="code-server 方案 环境配置"></a>code-server 方案 环境配置</h4><ul>
<li>公网的服务器</li>
<li>已经备案的域名</li>
<li>vite</li>
<li>code-server</li>
</ul>
<h4 id="步骤-举个-🌰-tax200-com"><a href="#步骤-举个-🌰-tax200-com" class="headerlink" title="步骤 举个 🌰 tax200.com"></a>步骤 举个 🌰 <code>tax200.com</code></h4><ol>
<li>服务器安装 <a href="https://coder.com/docs/code-server/latest">code-server</a></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># centos</span>
<span class="token function">curl</span> <span class="token parameter variable">-fOL</span> https://github.com/cdr/code-server/releases/download/v<span class="token variable">$VERSION</span>/code-server-<span class="token variable">$VERSION</span>-amd64.rpm
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">-i</span> code-server-<span class="token variable">$VERSION</span>-amd64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>cd 到项目目录 命令行执行 ,启动的 web 服务就是云端编辑器，开发地址 <a href="http://tax200.com:8080/">http://tax200.com:8080</a></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code-server <span class="token builtin class-name">.</span>
<span class="token comment"># Now visit http://127.0.0.1:8080.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>需要配置一下链接密码 配置文件在 ~/.config/code-server/config.yaml</p>
</blockquote>
<ol start="3">
<li>vite 配置 https 开发服务器功能 , 项目地址 <a href="https://tax200.com:8888/">https://tax200.com:8888</a></li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .vite.config.js</span>
<span class="token literal-property property">server</span><span class="token operator">:</span>  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">https</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token comment">// 对应域名的证书文件</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/usr/site/2_www.test.site.key'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/usr/site/1_www.test.site_bundle.crt'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//  https://127.0.0.1:8888.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>项目的<code>public</code>目录下放入企业微信管理后台的验证文件 <code>example.txt</code></li>
</ol>
<blockquote>
<p>保证 <a href="https://tax200.com:8888/example.txt%E8%83%BD%E5%A4%9F%E7%9B%B4%E6%8E%A5%E6%8B%BF%E5%88%B0">https://tax200.com:8888/example.txt能够直接拿到</a> <code>example.txt</code> 文件</p>
</blockquote>
<blockquote>
<p>现在能在 <a href="http://tax200.com:8080/">http://tax200.com:8080</a> 上修改源代码<br>同时在 <a href="https://tax200.com:8888/">https://tax200.com:8888</a> 上调试项目了<br>最后还是 build 部署到目标服务器上，这里只提供了一种在开发调试过程中提高效率的方案</p>
</blockquote>
<h2 id="2021-12-更新"><a href="#2021-12-更新" class="headerlink" title="2021-12 更新"></a>2021-12 更新</h2><p>之前采用的是 <code>code-server</code> + <code>测试服务器</code> 直接远程服务器 dev 加 debug 的模式 , 存在部分弊端</p>
<ul>
<li>修改之后的代码不能在 测试服务器 push 只能 cv 到本地提交</li>
<li>code-server 体验不太好，由于网关拦截，经常弹错误提示框，还增加了一个依赖维护项，属实麻烦</li>
</ul>
<h3 id="内网穿透-方案"><a href="#内网穿透-方案" class="headerlink" title="内网穿透 方案"></a>内网穿透 方案</h3><h4 id="开发流程的简单模型"><a href="#开发流程的简单模型" class="headerlink" title="开发流程的简单模型"></a>开发流程的简单模型</h4><ul>
<li>A ：具有域名 <code>test.com</code> 和 ssl 的公网机器</li>
<li>L ：本地开发机器</li>
</ul>
<blockquote>
<p>在 A L 之间建立 frp 隧道</p>
</blockquote>
<ul>
<li>A</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># frps.ini

 [common]
 bind_port &#x3D; 7000
 vhost_http_port &#x3D; 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>L</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># frpc.ini

[common]
server_addr &#x3D; xxx.xxx.xxx.xxx
server_port &#x3D; 7000

[web]
type &#x3D; http
local_ip &#x3D; 127.0.0.1
local_port &#x3D; 3000
custom_domains &#x3D; test.com

[unix_domain_socket]
type &#x3D; tcp
local_ip &#x3D; 127.0.0.1
remote_port &#x3D; 3000
local_port &#x3D; 3000
custom_domains &#x3D; test.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><blockquote>
<p>frp 隧道做了两件事<br>转发 test.com 的 http 请求到 local:3000 端口 用于应用服务<br>转发 ws://test.com:3000 的 ws 消息到 localhost:3000 上 用于 vite 热更新代码</p>
</blockquote>
<ul>
<li>A 主机开放 7000 端口, 配置 frps.ini 并启动服务端程序</li>
<li>L 本地 配置 frpc.ini 并启动客户端程序</li>
<li>本地 启动 3000 端口的 vite 开发服务</li>
<li>现在就可以在本地愉快的 debug 线上服务 test.com 了</li>
</ul>
<h4 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h4><ul>
<li>frpc 客户端会产生 error 日志 但是对 web 服务没影响</li>
<li>dev 在企业微信安卓上 起不来 (vite dev 没降级，内置浏览器不支持某些 api, mac pc 上 ok 的)</li>
<li>企业微信安卓路由跳转之后白屏 ( 刷新页面 ，原因不详,可能是 1 引发的，资源加载失败)</li>
</ul>
]]></content>
      <tags>
        <tag>js-sdk</tag>
        <tag>企业微信</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2020/04/09/tools/docker/</url>
    <content><![CDATA[<h4 id="docker-file"><a href="#docker-file" class="headerlink" title="docker file"></a>docker file</h4><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/images/docker.jpg" alt="docker操作导向"></h4><ul>
<li><a href="#%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E7%AB%99%E5%8A%A0%E9%80%9F">win | linux 配置镜像加速</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%8C%82%E5%9C%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA(windows)%E7%9B%AE%E5%BD%95%E5%88%B0%E5%AE%B9%E5%99%A8%E5%86%85">windows 下挂载容器路劲问题</a></li>
<li><a href="#nginx%E5%AE%B9%E5%99%A8%E7%A4%BA%E4%BE%8B">nginx 容器示例</a></li>
</ul>
<hr>
<h4 id="docker-run-：创建一个新的容器并运行一个命令-语法如下"><a href="#docker-run-：创建一个新的容器并运行一个命令-语法如下" class="headerlink" title="docker run ：创建一个新的容器并运行一个命令,语法如下"></a>docker run ：创建一个新的容器并运行一个命令,语法如下</h4><p><code>docker run [OPTIONS] IMAGE [COMMAND][arg...]</code></p>
<h4 id="OPTIONS-说明"><a href="#OPTIONS-说明" class="headerlink" title="OPTIONS 说明"></a>OPTIONS 说明</h4><ul>
<li>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li>-d: 后台运行容器，并返回容器 ID；</li>
<li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li>
<li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li>–name=”nginx-lb”: 为容器指定一个名称；</li>
<li>–dns 8.8.8.8: 指定容器使用的 DNS 服务器，默认和宿主一致；</li>
<li>–dns-search example.com: 指定容器 DNS 搜索域名，默认和宿主一致；</li>
<li>-h “mars”: 指定容器的 hostname；</li>
<li>-e username=”ritchie”: 设置环境变量；</li>
<li>–env-file=[]: 从指定文件读入环境变量；</li>
<li>–cpuset=”0-2” or –cpuset=”0,1,2”: 绑定容器到指定 CPU 运行；</li>
<li>-m :设置容器使用内存最大值；</li>
<li>–net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li>–link=[]: 添加链接到另一个容器；</li>
<li>–expose=[]: 开放一个端口或一组端口；</li>
</ul>
<h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">docker</span> pull images
<span class="token function">docker</span> images <span class="token function">ls</span>

<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>

<span class="token function">docker</span> run
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span>  container_id /bin/bash

<span class="token function">docker</span> stop container
<span class="token function">docker</span> <span class="token function">rm</span>  container
<span class="token function">docker</span> rmi   images
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="nginx-容器示例"><a href="#nginx-容器示例" class="headerlink" title="nginx 容器示例"></a>nginx 容器示例</h4><ul>
<li>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。<br><code>docker run --name mynginx -d nginx:latest</code></li>
<li>使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。<br><code>docker run -P 80:80 -d nginx:latest</code></li>
<li>使用镜像 nginx:latest 以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录/data 映射到容器的/data。<br><code>docker run -p 80:80 -v /data:/data -d nginx:latest</code></li>
<li>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash 命令。<br><code>docker run v - i -p 80:80 -v /data:/data -d nginx:latest /bin/bash</code></li>
<li>映射多个端口 <code>-p 80:70 -p 90:90</code> 前提是容器内部开发了此端口</li>
</ul>
<h4 id="配置镜像站加速"><a href="#配置镜像站加速" class="headerlink" title="配置镜像站加速"></a>配置镜像站加速</h4><ul>
<li><p>windows</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span>
    <span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>
    <span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">,</span>
    <span class="token string">"http://f1361db2.m.daocloud.io"</span><span class="token punctuation">,</span>
    <span class="token string">"https://f0bqmo17.mirror.aliyuncs.com"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>centos</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1</span>
<span class="token function">vim</span> /etc/docker/daemon.json
<span class="token comment"># 2</span>
将 windosw 上述配置 copy 进去 ,然后重启<span class="token variable"><span class="token variable">`</span><span class="token function">docker</span><span class="token variable">`</span></span> 服务
<span class="token comment"># 3</span>
<span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="关于挂在宿主机-windows-目录到容器内"><a href="#关于挂在宿主机-windows-目录到容器内" class="headerlink" title="关于挂在宿主机(windows)目录到容器内"></a>关于挂在宿主机(windows)目录到容器内</h4><ul>
<li>win （注意 windows 下的盘符）<br><code>docker run -dt -v /c/Users/Administrator/Desktop/test:/usr/share/nginx/html -p 80:80 nginx</code></li>
<li>如果宿主机时是 <code>docker for desktop</code> 还要设置 <code>file share</code> 需要设置挂载的宿主机(windows)所要挂在的目录</li>
<li><code>windows C</code>盘下的 <code>/test</code>目录 挂在到 <code>/usr/share/nginx/html</code>下</li>
<li><code>c/dir/</code> C 盘下的<code>dir</code>目录</li>
</ul>
<h4 id="关于-docker-run-d-某些容器运行后马上关闭的原因"><a href="#关于-docker-run-d-某些容器运行后马上关闭的原因" class="headerlink" title="关于 docker run -d 某些容器运行后马上关闭的原因"></a>关于 docker run -d 某些容器运行后马上关闭的原因</h4><blockquote>
<p>docker 需要一个前台守护进程保持运行状态，如果没有，则默认任务执行完毕，自动停止容器运行</p>
</blockquote>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>fanqiang</title>
    <url>/2019/10/09/tools/fanqiang/</url>
    <content><![CDATA[<h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><ul>
<li>github ： fanqiang</li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li>windows github chromeGo</li>
<li>macos v2rayU / showdowsocks</li>
<li>ubuntu v2rayL</li>
<li>andriod github chromeGo</li>
</ul>
]]></content>
      <tags>
        <tag>fanqiang tools</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/04/05/tools/git/</url>
    <content><![CDATA[<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul>
<li>git stash 缓存工作区</li>
<li>git stash pop 弹出缓存区</li>
<li>git checkout -b develop # 检出并移动到新分支</li>
<li>git fetch –all   # → 拉取所有远端的最新代码</li>
<li>git merge origin/develop   # → 如果是多人协作，merge 同事的修改到当前分支（先人后己原则）</li>
<li>git merge origin/master   # → 上线之前保证当前分支不落后于远端 origin/master，一定要 merge 远端 origin/master 到当前分支</li>
</ul>
<h4 id="git-全局-config"><a href="#git-全局-config" class="headerlink" title="git 全局 .config"></a>git 全局 .config</h4><ul>
<li>windows 下 <code>C:\Users\Administrator\.config</code></li>
<li>linux <code>/Users/admins/.gitconfig</code></li>
</ul>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><ul>
<li>gitUi</li>
<li>sourceTree</li>
</ul>
<h3 id="代理-git"><a href="#代理-git" class="headerlink" title="代理 git"></a>代理 git</h3><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">'socks5://127.0.0.1:1080'</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">'socks5://127.0.0.1:1080'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="针对-docker-容器"><a href="#针对-docker-容器" class="headerlink" title="针对 docker 容器"></a>针对 docker 容器</h4><p><code>run</code>，加上<code>--net=host</code> 这个选项，就可以实现容器内外共享网络，然后再在容器内部配置 git config，实现容器内代理</p>
<h4 id="只对-github-解决-clone-clone-pull-慢"><a href="#只对-github-解决-clone-clone-pull-慢" class="headerlink" title="只对 github (解决 clone clone/pull 慢)"></a>只对 github (解决 clone clone/pull 慢)</h4><p><code>git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</code></p>
<h4 id="取消针对-github-的代理"><a href="#取消针对-github-的代理" class="headerlink" title="取消针对 github 的代理"></a>取消针对 github 的代理</h4><p><code>git config --global --unset http.https://github.com.proxy</code></p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> [http "https://github.com"]</span>

<span class="token title important"><span class="token punctuation">#</span> proxy = socks5://127.0.0.1:2080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="一个分支强制覆盖另一个分支"><a href="#一个分支强制覆盖另一个分支" class="headerlink" title="一个分支强制覆盖另一个分支"></a>一个分支强制覆盖另一个分支</h4><blockquote>
<p>dev2 覆盖 dev</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先切换到dev</span>
<span class="token function">git</span> checkout dev

<span class="token comment"># 当前分支head 指向 dev2</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> dev2

<span class="token comment"># 本地 强制推送到 origin/dev</span>
<span class="token function">git</span> push <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="合并-bbb-gt-aaa"><a href="#合并-bbb-gt-aaa" class="headerlink" title="合并 bbb &gt; aaa"></a>合并 bbb &gt; aaa</h3><h4 id="单个-commit"><a href="#单个-commit" class="headerlink" title="单个 commit"></a>单个 commit</h4><blockquote>
<p>git cherry-pick 每次合并过来会显示文件冲突(其实并没有冲突代码部分，只需手动解决既可)</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">git</span> checkout  aaa

<span class="token comment"># bbb 分支上有一次 commit 82ecb31 合并到 aaa</span>
<span class="token function">git</span> cherry-pick 82ecb31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h4 id="一系列-commits"><a href="#一系列-commits" class="headerlink" title="一系列 commits"></a>一系列 commits</h4><blockquote>
<p>假设你需要合并 bbb 分支的 commit76cada ~62ecb3 到 aaa 分支。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">git</span> checkout bbb

<span class="token comment"># 需要基于 bbb 创建一个新的分支 newbbb，并指明新分支的最后一个commit：</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span>  newbbb 62ecb3

<span class="token comment"># rebase这个新分支的commit到 aaa（--onto aaa）。   76cada^ 指明你想从哪个特定的commit开始。</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> aaa 76cada^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="某些文件或者文件夹"><a href="#某些文件或者文件夹" class="headerlink" title="某些文件或者文件夹"></a>某些文件或者文件夹</h4><ol>
<li> 可选</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout aaa

<span class="token comment"># 合并  bbb  分支上f文件到feature分支上，将 bbb 分支上 f 文件追加补丁到 aaa  分支上 f文件。</span>
<span class="token comment"># 你可以接受或者拒绝补丁内容。</span>
<span class="token function">git</span> checkout <span class="token parameter variable">--patch</span> aaa f.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>强制</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout aaa

<span class="token comment"># 如果只是简单的将 bbb  分支的文件f.txt copy到 aaa 分支上；</span>
<span class="token function">git</span> checkout bbb f.txt
<span class="token comment"># 合并 packages文件夹 到master</span>
<span class="token function">git</span> checkout bbb packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>初试hexo</title>
    <url>/2020/04/01/tools/hexo/</url>
    <content><![CDATA[<h4 id="HEXO-document"><a href="#HEXO-document" class="headerlink" title="HEXO document"></a><a href="https://hexo.io/zh-cn/do">HEXO document</a></h4><h4 id="相关环境"><a href="#相关环境" class="headerlink" title="相关环境"></a>相关环境</h4><ul>
<li>node 12</li>
<li>git &gt;2</li>
</ul>
<h4 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h4><p><code>$ cnpm i hexo-cli -g</code></p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><code>$ hexo init blogname</code><br><code>$ cd blogname</code></p>
<h4 id="指定端口启动服务-默认-4000"><a href="#指定端口启动服务-默认-4000" class="headerlink" title="指定端口启动服务 默认 4000"></a>指定端口启动服务 默认 4000</h4><p><code>$ hexo server</code> 或<br><code>$ npm run server</code> 或<br><code>$ hexo server -p &lt;port&gt;</code></p>
<hr>
<h4 id="安装主题-diaspora"><a href="#安装主题-diaspora" class="headerlink" title="安装主题 diaspora"></a>安装主题 diaspora</h4><p><code> cd blogname</code><br><code> git clone https://github.com/Fechin/hexo-theme-diaspora.git themes/diaspora</code></p>
<h4 id="配置使用主题-diaspora"><a href="#配置使用主题-diaspora" class="headerlink" title="配置使用主题 diaspora"></a>配置使用主题 diaspora</h4><ul>
<li><code>$ cd blogname</code></li>
<li><code>$ vi _config.yml</code></li>
<li>修改 hexo 全局配置 <code>theme: diaspora</code></li>
</ul>
<hr>
<h4 id="创建搜索页"><a href="#创建搜索页" class="headerlink" title="创建搜索页"></a>创建搜索页</h4><ul>
<li><p>安装搜索插件<br><code>$ cnpm install hexo-generator-searchdb --save</code></p>
</li>
<li><p>配置 hexo 全局配置文件</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">... (省略部分)
search:
path: search.xml
field: post
format: html
limit: 10000
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><font size= 2 color=#aaaaaa> 备注 </font> &gt;<br><font size= 2  color=#aaaaaa> 官方说的安装插件后会自动生成<code>search.xml</code>文件，然后需要放在<code>hexo</code>的根目录 ，主题插件才会生效 </font> &gt; <font size= 2 color=#aaaaaa >我这里安装后并没有该文件，然后直接 <code>copy</code><br>配置到<code>exo</code>全局配置里，也生效了！ </font></p>
</blockquote>
</li>
<li><p>新建 search 页面<br><code>$ hexo new page search</code></p>
</li>
<li><p>编辑新建的页面设置类型为 serach</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: search
date: 2014-12-22 12:39:04
type: "search"</span>
<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改 /theme/diaspora/_config.yml</p>
<pre class="line-numbers language-markdowm" data-language="markdowm"><code class="language-markdowm">#本地搜索,请将索引文件放在网站根目录
local_search:
    #是否启用
    enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><font size=2 color=#aaaaaa>这里我也没找到索引文件,直接使用上述配置。</font></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h4><ul>
<li><p><code>$ hexo new page tags</code></p>
</li>
<li><p>修改新建的页面类型为 tags</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: tags
type: "tags"</span>
<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><em>更多 <a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a> 配置</em></p>
<p><em>更多<a href="https://hexo.io/zh-cn/docs/configuration">hexo</a>配置</em></p>
<p><font size=2 color=#aaaaaa></font></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MONGO DB</title>
    <url>/2018/08/08/tools/mongodb/</url>
    <content><![CDATA[<h4 id="使用-student-数据库"><a href="#使用-student-数据库" class="headerlink" title="使用 student 数据库"></a>使用 student 数据库</h4><p><code>use student</code></p>
<h4 id="查看数据集合"><a href="#查看数据集合" class="headerlink" title="查看数据集合"></a>查看数据集合</h4><p><code>show collections</code></p>
<h4 id="创建-students-集合"><a href="#创建-students-集合" class="headerlink" title="创建 students 集合"></a>创建 students 集合</h4><p><code>db.createCollection(&quot;users&quot;)</code></p>
<h4 id="向-students-插入数据"><a href="#向-students-插入数据" class="headerlink" title="向 students 插入数据"></a>向 students 插入数据</h4><p><code>db.students.insert(&#123;&quot;name&quot;:&quot;xiaoming&quot;&#125;)</code></p>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><ul>
<li>更新<br><code>db.student.update(&#123;&quot;score.shuxue&quot;:70&#125;,&#123;\$set:&#123;&quot;age&quot;:33&#125;&#125;);</code></li>
<li>替换<br><code>db.student.update(&#123;&quot;score.shuxue&quot;:70&#125;,&#123;&quot;age&quot;:33&#125;)</code></li>
</ul>
<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><ul>
<li>删除 users 集合中的某一条<br><code>db.users.remove(&#123;age: 132&#125;);</code></li>
<li>删除多个<br><code>db.restaurants.remove( &#123; &quot;borough&quot;: &quot;Queens&quot; &#125;, &#123; justOne: true &#125; )</code></li>
<li>删除 student 集合<br><code>db.student.drop()</code></li>
<li>删除该数据库<br><code>db.dropDatabases()</code></li>
</ul>
<h4 id="do"><a href="#do" class="headerlink" title="do"></a>do</h4><table>
<thead>
<tr>
<th>commands</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>db.student.find({})</td>
<td>查找所有</td>
</tr>
<tr>
<td>db.student.distinct(“name”)</td>
<td>去重</td>
</tr>
<tr>
<td>db.student.find({“name”:”小明”})</td>
<td>找到小明</td>
</tr>
<tr>
<td>db.student.find({age:{$gt:22}})</td>
<td>&gt;22</td>
</tr>
<tr>
<td>db.student.find({age:{$lt:22}})</td>
<td>&lt;22</td>
</tr>
<tr>
<td>db.student.find({age:{$get:22}})</td>
<td>&gt;=22</td>
</tr>
<tr>
<td>db.student.find({age:{$lte:22}})</td>
<td>&lt;=22</td>
</tr>
<tr>
<td>db.userInfo.find({name: /mongo/});</td>
<td>包含 mongo</td>
</tr>
<tr>
<td>db.userInfo.find({name: /^mongo/})</td>
<td>以 mongo 开头</td>
</tr>
<tr>
<td>db.userInfo.find({}, {name: 1, age: 1})</td>
<td>包含查找</td>
</tr>
<tr>
<td>db.userInfo.find().sort({age: -1});</td>
<td>以 age 降序</td>
</tr>
<tr>
<td>db.userInfo.find().limit(5);</td>
<td>查前五条</td>
</tr>
<tr>
<td>db.userInfo.find().limit(10).skip(5)</td>
<td>查 5-10 条</td>
</tr>
<tr>
<td>db.userInfo.find({$or: [{age: 22}, {age: 25}]})</td>
<td>22 OR 25</td>
</tr>
<tr>
<td>db.userInfo.find({age: {$gte: 25}}).count()</td>
<td>统计个数</td>
</tr>
<tr>
<td>db.userInfo.find({“RouteInfo”:{“$exists”:true}})</td>
<td>某个字段存在的语句</td>
</tr>
<tr>
<td>db.userInfo.find({“RouteInfo”:{“$exists”:false}})</td>
<td>某个字段不存在的语句</td>
</tr>
</tbody></table>
<hr>
<h2 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h2><ul>
<li>insertOne</li>
<li>insertMany</li>
<li>deleteOne</li>
<li>deleteMany</li>
<li>updateOne</li>
<li>updateMany</li>
<li>find</li>
<li>sort</li>
<li>limit</li>
<li>skip</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient
<span class="token comment">// const assert = require('assert');</span>

<span class="token comment">// Connection URL</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span>

<span class="token comment">// Database Name</span>
<span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'admin'</span>

MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> client</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span>
	<span class="token keyword">const</span> collection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'feserver'</span><span class="token punctuation">)</span>
	collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err :>> '</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data :>> '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2021/12/30/tools/nignx/</url>
    <content><![CDATA[<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li>web 服务器</li>
<li>反向代理</li>
</ul>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li><strong>建议下载源码自行构建</strong></li>
<li>centos <code>docker pull nginx </code></li>
<li>mac <code>brew install nginx</code></li>
</ul>
<h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><ul>
<li><code>nginx -t</code> 检查配置文件</li>
<li><code>nginx -s reload</code></li>
<li><code>nginx -s stop</code></li>
<li><code>nginx -s quit</code></li>
</ul>
<h3 id="Third-module"><a href="#Third-module" class="headerlink" title="Third module"></a>Third module</h3><ul>
<li><code>fancyindex</code> 文件服务目录</li>
<li><code>brotil</code> brotil 压缩和 gzip 一样需要配置 文件类型</li>
</ul>
<blockquote>
<p>下载 modelue 源码 并 增加模块编译参数<br>docker nginx image 和 brew 安装的 nginx 不太好处理</p>
</blockquote>
<h3 id="DO"><a href="#DO" class="headerlink" title="DO"></a>DO</h3><ul>
<li>gizp</li>
<li>brotil</li>
<li>proxy</li>
<li>vue-router-history</li>
<li>cache</li>
</ul>
<h3 id="🐛"><a href="#🐛" class="headerlink" title="🐛"></a>🐛</h3><ul>
<li><p>在多层代理转发过程中 <code>content-encoding: gzip</code> 压缩头丢失 , 配置文件中修改为<code>gzip_http_version : 1.0</code></p>
</li>
<li><p>文件服务器中,注意文件的访问权限， 否则 <code>403</code></p>
</li>
<li><p>保证<code>gzip_types</code> <code>gzip_min_length</code> 和预期一致</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>network server</tag>
      </tags>
  </entry>
  <entry>
    <title>NODEJS</title>
    <url>/2020/03/27/tools/node/</url>
    <content><![CDATA[<h3 id="NODE"><a href="#NODE" class="headerlink" title="NODE"></a>NODE</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>异步 I/O</p>
</li>
<li><p>事件回调</p>
</li>
<li><p>跨平台</p>
</li>
<li><p>单线程(js 执行线程,I/O,网络单独线程)</p>
</li>
<li><p>Node.js 是单进程单线程[针对 js 执行引擎]应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p>
</li>
<li><p>Node.js 几乎每一个 API 都是支持回调函数的。</p>
</li>
<li><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>
</li>
<li><p>Node.js 单线程类似进入一个 while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
</li>
</ul>
<h4 id="自动重启工具"><a href="#自动重启工具" class="headerlink" title="自动重启工具"></a>自动重启工具</h4><ul>
<li><p><code>npm -g install supervisor</code><br><code>supervisor app.js</code></p>
</li>
<li><p><code>npm i -g nodemon</code><br><code>nodemon app.js</code></p>
</li>
<li><p><code>npm i -g pm2</code><br><code>pm2 start app.js</code></p>
</li>
</ul>
<h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>1 外部输入数据<br>2 轮询阶段(poll)<br>3 检查阶段(check)<br>4 关闭事件回调阶段(close callback)<br>5 定时器检测阶段(timer)<br>6 I/O 事件回调阶段(I/O callbacks)<br>7 闲置阶段(idle, prepare)<br>8 轮询阶段（按照该顺序反复运行）…</p>
<h4 id="各个阶段"><a href="#各个阶段" class="headerlink" title="各个阶段"></a>各个阶段</h4><ul>
<li>timers 阶段：这个阶段执行 timer（setTimeout、setInterval）的回调</li>
<li>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</li>
<li>idle, prepare 阶段：仅 node 内部使用</li>
<li>poll 阶段：获取新的 I/O 事件, 适当的条件下 node 将阻塞在这里</li>
<li>check 阶段：执行 setImmediate() 的回调</li>
<li>close callbacks 阶段：执行 socket 的 close 事件回调</li>
</ul>
<h4 id="对比浏览器"><a href="#对比浏览器" class="headerlink" title="对比浏览器"></a>对比浏览器</h4><ul>
<li><p>浏览器和 Node 环境下，microtask 任务队列的执行时机不同</p>
</li>
<li><p>Node 端，microtask 在事件循环的各个阶段之间执行</p>
</li>
<li><p>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</p>
</li>
<li><p>当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行</p>
</li>
<li><p>process.nextTick 和 Promise 的回调函数，追加在本轮循环，即同步任务一旦执行完成，就开始执行它们。而 setTimeout、setInterval、setImmediate 的回调函数，追加在次轮循环。</p>
</li>
<li><p><a href="https://blog.csdn.net/Fundebug/article/details/86487117">链接</a></p>
</li>
</ul>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><ul>
<li>基本类型 传递的参数赋值给函数的局部变量</li>
<li>引用类型 复制地址 局部变量的变化会反映到函数外部</li>
</ul>
<h4 id="发送一个-http-请求"><a href="#发送一个-http-请求" class="headerlink" title="发送一个 http 请求"></a>发送一个 http 请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">httpRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> api</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">'test-fenhao.shebao.net'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> api<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">'68FCC10D17DA063E696CF4B0D95387CDB2694880EC06517E431563106BAD07C1790EC03EC159C7397E2F63C1E7F983E34650A00ED6BD7321'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> req <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>
      res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        str <span class="token operator">+=</span> e
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'http -----'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
      <span class="token function">rej</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="从终端获取制定问题答案"><a href="#从终端获取制定问题答案" class="headerlink" title="从终端获取制定问题答案"></a>从终端获取制定问题答案</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token constant">Q</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name  ?   '</span><span class="token punctuation">,</span> <span class="token string">'age ?   '</span><span class="token punctuation">,</span> <span class="token string">'location ?   '</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> <span class="token function-variable function">cb2promise</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>ars</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">res</span><span class="token punctuation">(</span>ars<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAnswers</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token constant">Q</span><span class="token punctuation">,</span>
    obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token literal-property property">trim</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> length<span class="token punctuation">,</span> trim <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj
    <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token constant">Q</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">cb2promise</span><span class="token punctuation">(</span>readline<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>readline<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
      answer<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> trim <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> c
    <span class="token punctuation">&#125;</span>
    readline<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> answer
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getAnswers</span><span class="token punctuation">(</span><span class="token constant">Q</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">[</span>answer<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">Q</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode相关配置</title>
    <url>/2020/09/15/tools/vscode/</url>
    <content><![CDATA[<h2 id="vscode-编辑器"><a href="#vscode-编辑器" class="headerlink" title="vscode 编辑器"></a>vscode 编辑器</h2><h3 id="step"><a href="#step" class="headerlink" title="step"></a>step</h3><ol>
<li>终端进入项目根目录</li>
<li>```bash<br>mkdir .vscode &amp;&amp; curl <a href="https://raw.githubusercontent.com/yanstars/vscode-setting/master/.vscode/global_settings.json">https://raw.githubusercontent.com/yanstars/vscode-setting/master/.vscode/global_settings.json</a> –output .vscode/settings.json &amp;&amp; curl <a href="https://raw.githubusercontent.com/yanstars/vscode-setting/master/.vscode/extensions.json">https://raw.githubusercontent.com/yanstars/vscode-setting/master/.vscode/extensions.json</a> –output .vscode/extensions.json<pre class="line-numbers language-none"><code class="language-none">3. &#96;vscode&#96;内调出命令面板 &#96;ctrl +command +p&#96;
4. 输入 &#96;重新加载窗口&#96;
5. 重复步骤 &#96;3&#96;
6. 输入：&#96;扩展 推荐的扩展&#96;
7. 左侧扩展栏 , 找到工作区推荐,点击右侧不远处的 &#96;一键下载&#96;
8. 重复步骤 &#96;3&#96; &#96;4&#96;

#### extensions 扩展

&#96;&#96;&#96;json
&#123;
	&quot;recommendations&quot;: [
		&quot;aaron-bond.better-comments&quot;,
		&quot;abusaidm.html-snippets&quot;,
		&quot;bierner.color-info&quot;,
		&quot;christian-kohler.path-intellisense&quot;,
		&quot;coenraads.bracket-pair-colorizer-2&quot;,
		&quot;davidanson.vscode-markdownlint&quot;,
		&quot;dbaeumer.vscode-eslint&quot;,
		&quot;dotcypress.console-log&quot;,
		&quot;dzannotti.vscode-babel-coloring&quot;,
		&quot;eamodio.gitlens&quot;,
		&quot;emmanuelbeziat.vscode-great-icons&quot;,
		&quot;eriklynd.json-tools&quot;,
		&quot;esbenp.prettier-vscode&quot;,
		&quot;formulahendry.code-runner&quot;,
		&quot;gruntfuggly.todo-tree&quot;,
		&quot;hollowtree.vue-snippets&quot;,
		&quot;hookyqr.beautify&quot;,
		&quot;leetcode.vscode-leetcode&quot;,
		&quot;ms-azuretools.vscode-docker&quot;,
		&quot;ms-ceintl.vscode-language-pack-zh-hans&quot;,
		&quot;ms-vscode.js-debug&quot;,
		&quot;ms-vscode.js-debug-companion&quot;,
		&quot;ms-vscode.js-debug-nightly&quot;,
		&quot;ms-vscode.node-debug&quot;,
		&quot;ms-vscode.node-debug2&quot;,
		&quot;ms-vscode.references-view&quot;,
		&quot;ms-vscode.vscode-js-profile-table&quot;,
		&quot;msjsdiag.debugger-for-chrome&quot;,
		&quot;octref.vetur&quot;,
		&quot;pkief.material-icon-theme&quot;,
		&quot;pranaygp.vscode-css-peek&quot;,
		&quot;ritwickdey.liveserver&quot;,
		&quot;sdras.vue-vscode-snippets&quot;,
		&quot;shan.code-settings-sync&quot;,
		&quot;shd101wyy.markdown-preview-enhanced&quot;,
		&quot;streetsidesoftware.code-spell-checker&quot;,
		&quot;techer.open-in-browser&quot;,
		&quot;tomoki1207.pdf&quot;,
		&quot;vincaslt.highlight-matching-tag&quot;,
		&quot;vscode-icons-team.vscode-icons&quot;,
		&quot;wallabyjs.quokka-vscode&quot;,
		&quot;wayou.vscode-todo-highlight&quot;,
		&quot;xabikos.javascriptsnippets&quot;,
		&quot;zhuangtongfa.material-theme&quot;
	]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="settings-设置"><a href="#settings-设置" class="headerlink" title="settings 设置"></a>settings 设置</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token comment">//编辑器的配置</span>
	<span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 编辑器tab尺寸</span>
	<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"octref.vetur"</span><span class="token punctuation">,</span>
	<span class="token property">"diffEditor.ignoreTrimWhitespace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 控制差异编辑器是否将对前导空格或尾随空格的更改显示为差异</span>
	<span class="token property">"editor.trimAutoWhitespace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 删除尾随自动插入的空格</span>
	<span class="token property">"javascript.format.semicolons"</span><span class="token operator">:</span> <span class="token string">"remove"</span><span class="token punctuation">,</span> <span class="token comment">//移除js语句分号</span>
	<span class="token property">"typescript.format.semicolons"</span><span class="token operator">:</span> <span class="token string">"remove"</span><span class="token punctuation">,</span> <span class="token comment">//移除ts语句分号</span>
	<span class="token property">"typescript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//函数括号加空格</span>
	<span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//函数括号加空格</span>
	<span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span> <span class="token comment">// 失去焦点时保存</span>
	<span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 保存时格式化</span>
	<span class="token comment">//prettier的配置</span>
	<span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不使用分号结尾</span>
	<span class="token property">"prettier.tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//tab宽度2</span>
	<span class="token property">"prettier.useTabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 缩进使用tab，不使用空格</span>
	<span class="token property">"prettier.trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token comment">//是否添加尾随逗号</span>
	<span class="token property">"prettier.printWidth"</span><span class="token operator">:</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token comment">//最大换行值</span>
	<span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号</span>
	<span class="token comment">//vetur的配置</span>
	<span class="token property">"vetur.validation.template"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不走校验规则</span>
	<span class="token comment">// "vetur.format.options.useTabs": true,//使用tab缩进</span>
	<span class="token property">"vetur.format.scriptInitialIndent"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//script下一行缩进</span>
	<span class="token property">"vetur.format.styleInitialIndent"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//style下一行缩进</span>
	<span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"js-beautify-html"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.css"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.postcss"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.scss"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.less"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.stylus"</span><span class="token operator">:</span> <span class="token string">"stylus-supremacy"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.ts"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatter.sass"</span><span class="token operator">:</span> <span class="token string">"sass-formatter"</span><span class="token punctuation">,</span>
	<span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token property">"wrap_line_length"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
			<span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span><span class="token punctuation">,</span>
			<span class="token property">"end_with_newline"</span><span class="token operator">:</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token comment">//文件格式化工具配置</span>
	<span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"vscode.typescript-language-features"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[typescript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"vscode.typescript-language-features"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[markdown]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[vue]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"octref.vetur"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[jsonc]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[scss]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[css]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[html]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"[json]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"leetcode.endpoint"</span><span class="token operator">:</span> <span class="token string">"leetcode-cn"</span><span class="token punctuation">,</span>
	<span class="token property">"sonarlint.connectedMode.connections.sonarqube"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">&#123;</span>
			<span class="token property">"serverUrl"</span><span class="token operator">:</span> <span class="token string">"http://sonar.shebao.net"</span><span class="token punctuation">,</span>
			<span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"fe0dfa9c9d39bf4d22a1ec333fba6f3c54c1d20b"</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">"sonarlint.connectedMode.project"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"projectKey"</span><span class="token operator">:</span> <span class="token string">"frontend-vue-wo.shebao.net"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"sonarlint.ls.javaHome"</span><span class="token operator">:</span> <span class="token string">"/Users/mengqingtao/.vscode/extensions/sonarsource.sonarlint_managed-jre/jre/jdk-11.0.8+10-jre/Contents/Home"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="webpack-自动化插件格式化-针对多文件基础规范"><a href="#webpack-自动化插件格式化-针对多文件基础规范" class="headerlink" title="webpack 自动化插件格式化(针对多文件基础规范)"></a>webpack 自动化插件格式化(针对多文件基础规范)</h2><h4 id="prettier-2-选-1"><a href="#prettier-2-选-1" class="headerlink" title="prettier(2 选 1)"></a>prettier(2 选 1)</h4><h4 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h4><h4 id="prettier-eg"><a href="#prettier-eg" class="headerlink" title="prettier eg:"></a>prettier eg:</h4><ul>
<li><code>npm i prettier -D </code></li>
<li>package.json 中 script 加入<br><code> &quot;lint&quot;: &quot;npx prettier --write src/&quot;,</code></li>
<li>根目录新建 <code>.prettierrc.json</code>文件</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">160</span><span class="token punctuation">,</span>
	<span class="token property">"jsxBracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
	<span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
	<span class="token property">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>
	<span class="token property">"vueIndentScriptAndStyle"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>npm run lint</code></li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack5 &amp;&amp; vue</title>
    <url>/2021/03/17/tools/webpack5/</url>
    <content><![CDATA[<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span>
<span class="token property">"vuex"</span><span class="token operator">:</span> <span class="token string">"^3.6.2"</span><span class="token punctuation">,</span>
<span class="token property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"^3.5.1"</span><span class="token punctuation">,</span>
<span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^15.9.6"</span><span class="token punctuation">,</span>
<span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// MINI</span>
<span class="token property">"terser-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.1.1"</span><span class="token punctuation">,</span>

<span class="token comment">// BABEL</span>
<span class="token comment">// BASE</span>
<span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.13.8"</span><span class="token punctuation">,</span>
<span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.2.2"</span><span class="token punctuation">,</span>
<span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.13.9"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// BASE LOADER</span>
<span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.1.1"</span><span class="token punctuation">,</span>
<span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>
<span class="token comment">// MINI CSS</span>
<span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.3.9"</span><span class="token punctuation">,</span>
<span class="token property">"css-minimizer-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.2.0"</span><span class="token punctuation">,</span>
<span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"purgecss-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.0.2"</span><span class="token punctuation">,</span>

<span class="token comment">// SASS</span>
<span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^11.0.1"</span><span class="token punctuation">,</span>
<span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>
<span class="token comment">// postcss</span>
<span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^5.1.0"</span><span class="token punctuation">,</span>
<span class="token property">"precss"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"autoprefixer"</span><span class="token operator">:</span> <span class="token string">"^10.2.5"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="OTHER"><a href="#OTHER" class="headerlink" title="OTHER"></a>OTHER</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.2.0"</span><span class="token punctuation">,</span>
<span class="token property">"node-notifier"</span><span class="token operator">:</span> <span class="token string">"^9.0.0"</span><span class="token punctuation">,</span>
<span class="token property">"friendly-errors-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>
<span class="token property">"cross-env"</span><span class="token operator">:</span> <span class="token string">"^7.0.3"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a>config.js</h2><h3 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> VueLoaderPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">mainFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jsnext:main'</span><span class="token punctuation">,</span> <span class="token string">'module'</span><span class="token punctuation">,</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">vue$</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
		<span class="token comment">// index: &#123;</span>
		<span class="token comment">//   import: './src/index.js',</span>
		<span class="token comment">//   dependOn: 'shared',</span>
		<span class="token comment">// &#125;,</span>
		<span class="token comment">// ui: &#123;</span>
		<span class="token comment">//   import: './src/ui.js',</span>
		<span class="token comment">//   dependOn: 'shared',</span>
		<span class="token comment">// &#125;,</span>
		<span class="token comment">// shared: 'vue',</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token comment">// title: 'Production', title 和 tempalte 起,冲突</span>
			<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token constant">RUN_ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">RUN_ENV</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//  不需要 CleanWebpackPlugin  了  webpack5.2新增</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
					<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token function-variable function">exclude</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
					<span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
					<span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
						<span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
					<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|svg|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/resource'</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'asset/resource'</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> merge <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置此选项后 ， 默认添加 HMR plugin</span>
		<span class="token literal-property property">quiet</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token comment">// webpack5存在 热更新失效bug 设置该选项可暂时解决，不知道官方是否修复</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(scss|css)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token string">'style-loader'</span><span class="token punctuation">,</span>
					<span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
					<span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
					<span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> merge <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.js'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> TerserWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-minimizer-webpack-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token punctuation">&#123;</span>
				<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(scss|css)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
				<span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">importLoaders</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

	<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">vue</span><span class="token operator">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'style/[name].css'</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 压缩css</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开始最小化</span>
		<span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
				<span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
					<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'chunk-vendors'</span><span class="token punctuation">,</span>
					<span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
					<span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>
					<span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">common</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
					<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'chunk-common'</span><span class="token punctuation">,</span>
					<span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
					<span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
					<span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span>
					<span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">performance</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">hints</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token literal-property property">maxEntrypointSize</span><span class="token operator">:</span> <span class="token number">512000</span><span class="token punctuation">,</span>
		<span class="token literal-property property">maxAssetSize</span><span class="token operator">:</span> <span class="token number">512000</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>eslint</li>
<li>prettier</li>
<li>node-notifier</li>
<li>copy-webpack-plugin</li>
</ul>
<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">[</span>
			<span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token comment">// 默认不处理api</span>
			<span class="token punctuation">&#123;</span>
				<span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span> <span class="token comment">// 处理api 默认为false ，即不处理</span>
				<span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token number">3</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>useBuiltIns<ul>
<li>fasle 默认不处理 api ，只转换语法</li>
<li>usage 按需加载 polyfill</li>
<li>entry 手动 引入 @babel/polyfill (core-js ,regenerator-runtime)</li>
</ul>
</li>
</ul>
<h3 id="！！"><a href="#！！" class="headerlink" title="！！"></a>！！</h3><ul>
<li>node package 和 webpack 的对应关系</li>
<li>package-lock.json 版本控制<ul>
<li>npm uninstall xx</li>
<li>npm install xxx</li>
</ul>
</li>
<li>optimize-css-assets-webpack-plugin 会重新计算 z-index 导致数值变化<ul>
<li>safe = true</li>
</ul>
</li>
<li>webpack 本身支持 EsModule<ul>
<li>package.json 设置 “type”: “module”</li>
<li>或者运行之前 –experimental-modules</li>
</ul>
</li>
<li>purgecss-webpack-plugin glob ,只能配合 MiniCssExtractPlugin 使用。<ul>
<li>拼接出来的 class 失效</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>yabai使用</title>
    <url>/2020/09/04/tools/yabai/</url>
    <content><![CDATA[<h3 id="yabai"><a href="#yabai" class="headerlink" title="yabai"></a>yabai</h3><blockquote>
<p>配合 skhd 使用</p>
</blockquote>
<ul>
<li><code>shift alt c</code></li>
<li><code>alt e</code></li>
<li><code>shfit command h | j | k | l</code></li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
